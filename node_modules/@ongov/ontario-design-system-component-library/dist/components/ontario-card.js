import { p as proxyCustomElement, H, h } from './index.js';
import { C as ConsoleMessageClass } from './p-CJXRCL8b.js';
import { p as printArray } from './p-DQi-JVyL.js';
import { v as validateValueAgainstArray } from './p-CNqFEifG.js';

const layoutDirectionDefinitions = ['vertical', 'horizontal'];
const headerColourDefinitions = [
	'dark-accent',
	'light-accent',
	'light-gold',
	'light-yellow',
	'light-taupe',
	'light-green',
	'light-lime',
	'light-teal',
	'light-sky',
	'light-blue',
	'light-purple',
	'light-orange',
	'light-red',
	'light-magenta',
	'gold',
	'yellow',
	'taupe',
	'green',
	'lime',
	'teal',
	'sky',
	'blue',
	'purple',
	'orange',
	'red',
	'magenta',
];

const headingLevelDefinitions = ['h2', 'h3', 'h4', 'h5', 'h6'];

const ontarioCardCss =
	'.ontario-card__heading{font-style:normal;font-weight:700;text-rendering:optimizeLegibility;margin-bottom:1rem;font-feature-settings:normal;font-family:"Raleway", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif}.ontario-card__heading{font-size:1.25rem;letter-spacing:0.03rem;line-height:1.5;margin:0 0 0.75rem 0;max-width:48rem}@media screen and (min-width: 40em){.ontario-card__heading{font-size:1.5rem;letter-spacing:0.0313rem;line-height:1.5}}.ontario-card{box-shadow:0rem 0.1875rem 0.5rem 0.0625rem rgba(0, 0, 0, 0.4);border-radius:4px;margin-bottom:2.5rem;padding:0;height:calc(100% - 2.5rem);list-style-type:none;transition:all 0.3s ease-in-out;position:relative;cursor:pointer;background:#FFFFFF}.ontario-card:hover{box-shadow:0rem 0.375rem 0.75rem 0.125rem rgba(0, 0, 0, 0.35)}.ontario-card:focus-within{box-shadow:0 0 0 4px #009ADB;outline:4px solid transparent;transition:box-shadow 0.1s ease-in-out}.ontario-card:active{box-shadow:0 0 0 4px #009ADB;background-color:#f2f2f2}@media screen and (max-width: 40em){.ontario-card{margin-bottom:3rem;width:100% !important;max-width:100%}}.ontario-card--image-true{margin-top:-0.5rem}.ontario-card__card-type--horizontal .ontario-card--image-true{margin-top:0}.ontario-card__card-type--horizontal{display:flex}@media screen and (max-width: 40em){.ontario-card__card-type--horizontal{width:100%;max-width:100%}}.ontario-card__card-type--horizontal .ontario-card__image-container,.ontario-card__card-type--horizontal .ontario-card__text-container{position:relative}.ontario-card__card-type--horizontal .ontario-card__heading{border-radius:0}.ontario-card__card-type--horizontal a:focus-within{box-shadow:none;outline:none}.ontario-card__card-type--horizontal a:active{box-shadow:none}.ontario-card__card-type--horizontal img{height:100%;position:absolute}.ontario-card__image-right{flex-direction:row-reverse}.ontario-card__heading{margin:0;border-radius:4px 4px 0 0;padding:1.25rem 1.5rem 0.5rem 1.5rem;transition:text-decoration 0.3s ease-in-out;background-color:#FFFFFF;max-width:none}.ontario-card:hover .ontario-card__heading{text-decoration-line:underline;text-decoration-color:#1a1a1a}.ontario-card--image-true .ontario-card__heading{border-radius:0}.ontario-card__image-right .ontario-card--image-true .ontario-card__heading{border-radius:4px 0 0 0}.ontario-card__image-left .ontario-card--image-true .ontario-card__heading{border-radius:0 4px 0 0}.ontario-card__heading a{color:#1a1a1a;text-decoration:none;outline:none}.ontario-card__heading a::after{content:"";position:absolute;left:0;top:0;right:0;bottom:0}.ontario-card__heading a:focus{box-shadow:none}.ontario-card__heading a:active{outline:none}@media screen and (max-width: 73em){.ontario-card__heading{font-size:1.25rem;padding-left:1rem;padding-right:1rem}}.ontario-card__background--light-accent{background-color:#f2f2f2}.ontario-card__heading--light-accent{background-color:#f2f2f2;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--dark-accent{background-color:#1a1a1a}.ontario-card__heading--dark-accent{background-color:#1a1a1a;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-gold{background-color:#F0E7CC}.ontario-card__heading--light-gold{background-color:#F0E7CC;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-yellow{background-color:#F8E5C3}.ontario-card__heading--light-yellow{background-color:#F8E5C3;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-taupe{background-color:#EBE7DB}.ontario-card__heading--light-taupe{background-color:#EBE7DB;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-green{background-color:#D1EFD4}.ontario-card__heading--light-green{background-color:#D1EFD4;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-lime{background-color:#DDEDC7}.ontario-card__heading--light-lime{background-color:#DDEDC7;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-teal{background-color:#CFEDED}.ontario-card__heading--light-teal{background-color:#CFEDED;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-sky{background-color:#C5EEFA}.ontario-card__heading--light-sky{background-color:#C5EEFA;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-purple{background-color:#F1E3F2}.ontario-card__heading--light-purple{background-color:#F1E3F2;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-orange{background-color:#FEE1D9}.ontario-card__heading--light-orange{background-color:#FEE1D9;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-red{background-color:#FFE0E2}.ontario-card__heading--light-red{background-color:#FFE0E2;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--light-magenta{background-color:#FEDFF0}.ontario-card__heading--light-magenta{background-color:#FEDFF0;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--gold{background-color:#CBA52E}.ontario-card__heading--gold{background-color:#CBA52E;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--yellow{background-color:#FCAF17}.ontario-card__heading--yellow{background-color:#FCAF17;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--taupe{background-color:#C1B28F}.ontario-card__heading--taupe{background-color:#C1B28F;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--green{background-color:#39B54A}.ontario-card__heading--green{background-color:#39B54A;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--lime{background-color:#8DC63F}.ontario-card__heading--lime{background-color:#8DC63F;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--teal{background-color:#49A7A2}.ontario-card__heading--teal{background-color:#49A7A2;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--sky{background-color:#00B2E3}.ontario-card__heading--sky{background-color:#00B2E3;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--purple{background-color:#B975B7}.ontario-card__heading--purple{background-color:#B975B7;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--orange{background-color:#F15A22}.ontario-card__heading--orange{background-color:#F15A22;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--red{background-color:#F0454B}.ontario-card__heading--red{background-color:#F0454B;padding-top:1rem;padding-bottom:1rem}.ontario-card__background--magenta{background-color:#F03093}.ontario-card__heading--magenta{background-color:#F03093;padding-top:1rem;padding-bottom:1rem}.ontario-card__card-type--horizontal .ontario-card__text-container{width:66.6666666667%}.ontario-card__image-size-one-fourth .ontario-card__text-container{width:75%}.ontario-card--no-image .ontario-card__text-container{width:100%}.ontario-card__description{margin:0;padding:0.5rem 1.5rem 1.5rem 1.5rem;background-color:#FFFFFF;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.ontario-card__description p{margin-top:0}.ontario-card__description p:last-of-type{margin-bottom:0}@media screen and (max-width: 73em){.ontario-card__description{padding:0.5rem 1rem 1.5rem 1rem}}.ontario-card--position-vertical .ontario-card__image-container{margin-bottom:-0.5rem}.ontario-card__card-type--horizontal .ontario-card__image-container{width:33.3%}.ontario-card__image-size-one-fourth .ontario-card__image-container{width:25%}.ontario-card__image{width:100%;height:100%;object-fit:cover;background-size:100% 100%}.ontario-card--position-vertical .ontario-card__image{border-top-left-radius:4px;border-top-right-radius:4px}.ontario-card__image-right .ontario-card__image{border-top-right-radius:4px;border-bottom-right-radius:4px}.ontario-card__image-left .ontario-card__image{border-top-left-radius:4px;border-bottom-left-radius:4px}';

const OntarioCard$1 = /*@__PURE__*/ proxyCustomElement(
	class OntarioCard extends H {
		constructor() {
			super();
			this.__registerHost();
			this.__attachShadow();
		}
		get host() {
			return this;
		}
		/**
		 * Text to be displayed within the header.
		 *
		 * @example
		 *	<ontario-card
		 *		header-type="dark"
		 *		card-type="horizontal"
		 *		label="Card Title 1"
		 *		description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
		 *	>
		 */
		label;
		/**
		 * The heading level that the label will be rendered as.
		 *
		 * @example
		 *	<ontario-card
		 *		heading-level="h4"
		 *		label="Card Title 1"
		 *	>
		 */
		headingLevel = 'h2';
		/**
		 * Image to be displayed within the card image container.
		 *
		 * This is optional.
		 */
		image;
		/**
		 * Alt text for the card's image.
		 *
		 * This is optional prop, but may be required for an
		 * image due to accessibility requirements.
		 *
		 * You can find guidance on when to add alt text to an image
		 * on the Ontario.ca web content editing guide.
		 *
		 * https://www.ontario.ca/page/ontario-ca-web-content-editing-guide#alt-text-image-accessibility
		 *
		 * Note: This should default to an empty string ('') to ensure the alt attribute appears in the markup
		 * for decorative images. If left as undefined, the alt attribute will not render in markup.
		 */
		imageAltText = '';
		/**
		 * Text to be displayed within the card description container.
		 *
		 * This is optional.
		 */
		description;
		/**
		 * Action link for when the card is clicked.
		 *
		 * This is optional.
		 */
		cardLink;
		/**
		 * The layout direction/orientation of the card.
		 *
		 * If no type is passed, it will default to 'vertical'.
		 *
		 */
		layoutDirection = 'vertical';
		/**
		 * Set the card's header colour.
		 *
		 * This is optional.
		 */
		headerColour;
		/**
		 * The position of the image when the card-type is set to 'horizontal'.
		 *
		 * This prop is only necessry when the card-type is set to 'horizontal'.
		 *
		 * @example
		 * 	<ontario-card
		 *		card-type="horizontal"
		 *		label="Card Title 1"
		 *		image="https://picsum.photos/200/300"
		 *		horizontal-image-position-type="left"
		 *		horizontal-image-size-type="one-fourth"
		 *	  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
		 *	>
		 *	</ontario-card>
		 */
		horizontalImagePositionType = 'left';
		/**
		 * The size of the image when the card-type is set to 'horizontal'.
		 *
		 * This prop is only necessry when the card-type is set to 'horizontal'.
		 *
		 * @example
		 * 	<ontario-card
		 *		card-type="horizontal"
		 *		label="Card Title 1"
		 *		image="https://picsum.photos/200/300"
		 *		horizontal-image-position-type="left"
		 *		horizontal-image-size-type="one-fourth"
		 *	  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
		 *	>
		 *	</ontario-card>
		 */
		horizontalImageSizeType = 'one-third';
		/**
		 * Provides more context as to what the card interaction is doing. This should only be used for accessibility purposes, if the card interaction requires more * * description than what the text provides.
		 *
		 * This is optional.
		 *
		 */
		ariaLabelText;
		cardState = {
			headerColour: undefined,
			headingLevel: undefined,
			layoutDirection: undefined,
		};
		/**
		 * Watch for changes to the `layoutDirection` property for validation purposes.
		 *
		 * If the user input doesn't match one of the array values then `layoutDirection` will be set to its default (`vertical`).
		 * If a match is found in one of the array values then `cardState.layoutDirection` will be set to the matching array key value.
		 */
		validateLayoutDirection() {
			const isValid =
				this.layoutDirection && validateValueAgainstArray(this.layoutDirection, layoutDirectionDefinitions);
			if (!isValid) {
				this.printPropWarning(
					'layout-direction',
					'<ontario-card>',
					this.layoutDirection,
					layoutDirectionDefinitions,
					'vertical',
				);
				this.updateCardState('layoutDirection', 'vertical');
				return;
			}
			this.updateCardState('layoutDirection', this.layoutDirection);
		}
		/**
		 * Watch for changes to the `headingLevel` property for validation purposes.
		 *
		 * If the user input doesn't match one of the array values then `headingLevel` will be set to its default (`h2`).
		 *
		 * If a match is found in one of the array values then `headingLevel` will be set to the matching array key value.
		 */
		validateHeadingLevel() {
			const isValid = this.headingLevel && validateValueAgainstArray(this.headingLevel, headingLevelDefinitions);
			if (!isValid) {
				this.printPropWarning('heading-level', '<ontario-card>', this.headingLevel, headingLevelDefinitions, 'h2');
				this.updateCardState('headingLevel', 'h2');
				return;
			}
			this.updateCardState('headingLevel', this.headingLevel);
		}
		/**
		 * Watch for changes to the `headerColour` property for validation purposes.
		 *
		 * If the user input doesn't match one of the array values then `headerColour` will be kept empty (undefined).
		 * If a match is found in one of the array values then `headerColour` will be set to the matching array key value.
		 */
		validateHeaderColour() {
			const isValid = this.headerColour && validateValueAgainstArray(this.headerColour, headerColourDefinitions);
			if (!isValid && this.headerColour !== undefined) {
				this.printPropWarning(
					'header-colour',
					'<ontario-card>',
					this.headerColour,
					headerColourDefinitions,
					'undefined',
				);
				this.updateCardState('headerColour', undefined);
				return;
			}
			this.updateCardState('headerColour', this.headerColour);
		}
		/**
		 * Print an invalid prop warning message.
		 *
		 * @param {string} propName - Name of the prop
		 * @param {string} component - Component the error is on e.g. <ontario-card>
		 * @param {any} propValue - Value of the prop
		 * @param {readonly any[]} acceptableValues  - readonly array of acceptable prop values
		 * @param {string} defaultValue - Stringified representation of the value that the corresponding State Object value will default to
		 */
		printPropWarning(propName, component, propValue, acceptableValues, defaultValue) {
			const message = new ConsoleMessageClass();
			message
				.addDesignSystemTag()
				.addMonospaceText(` ${propName} `)
				.addRegularText('on')
				.addMonospaceText(` ${component} `)
				.addRegularText('was set to an invalid value of ')
				.addMonospaceText(` ${propValue} `)
				.addRegularText('. Only ')
				.addMonospaceText(printArray([...acceptableValues]))
				.addRegularText(' are supported values. The default value of')
				.addMonospaceText(` ${defaultValue} `)
				.addRegularText('is assumed.')
				.printMessage();
		}
		/**
		 * Update a key within the State Object with a value.
		 *
		 * Note: When state is represented as an object, and values are changed, the entire object needs to be rebuilt.
		 * If only the corresponding object key/value is updated, corresponding render changes may not happen.
		 *
		 * @param {keyof CardState} key - Should match a key found within `CardState`.
		 * @param {any} value - Should match the value type associated to the key within `CardState`.
		 */
		updateCardState(key, value) {
			const cardStateCopy = { ...this.cardState };
			cardStateCopy[key] = value;
			this.cardState = cardStateCopy;
		}
		/**
		 * Returns the top level classes of the card.
		 *
		 * @returns {string}
		 */
		getCardClasses() {
			const baseClass =
				this.cardState.layoutDirection === 'horizontal'
					? `ontario-card ontario-card__card-type--${this.cardState.layoutDirection} ontario-card__image-${this.horizontalImagePositionType} ontario-card__image-size-${this.horizontalImageSizeType}`
					: `ontario-card ontario-card__card-type--basic ontario-card--position-${this.cardState.layoutDirection}`;
			const descriptionClass = this.description ? '' : ' ontario-card__description-false';
			const backgroundClass =
				this.headerColour && !this.description ? `ontario-card__background--${this.headerColour}` : '';
			return `${baseClass} ${descriptionClass} ${backgroundClass}`.trim();
		}
		/**
		 * Returns the heading classes of the card.
		 *
		 * @returns {string}
		 */
		getCardHeadingClasses() {
			const baseClass = 'ontario-card__heading';
			const backgroundClass = this.cardState.headerColour
				? `ontario-card__heading--${this.cardState.headerColour}`
				: '';
			return `${baseClass} ${backgroundClass}`.trim();
		}
		/**
		 * Returns the url that the card links to.
		 *
		 * @returns {string}
		 */
		getHref() {
			return this.cardLink ? this.cardLink : '#';
		}
		/**
		 * Component life cycle hook.
		 *
		 * https://stenciljs.com/docs/component-lifecycle#connectedcallback
		 */
		componentWillLoad() {
			this.validateLayoutDirection();
			this.validateHeadingLevel();
			this.validateHeaderColour();
		}
		render() {
			return h(
				'li',
				{ key: '2491546d5c8cd802237264110f6af2635c9fd2f3', class: this.getCardClasses() },
				this.image &&
					h(
						'div',
						{ key: 'e2c66a5844d5dc92422bb40e7df02dec8951c574', class: 'ontario-card__image-container' },
						h(
							'a',
							{
								'key': '14146da6cc4600e8ab54bd246e0655d3828cdae0',
								'href': this.getHref(),
								'aria-label': this.ariaLabelText,
							},
							h('img', {
								key: '7b80dc691d2a323b5d0078c9c7ef93e96b073367',
								class: 'ontario-card__image',
								alt: this.imageAltText,
								src: this.image,
							}),
						),
					),
				h(
					'div',
					{
						key: '78dd72f3673fc4528660fc24361df6509ed8e4b9',
						class: `ontario-card__text-container ${this.image ? 'ontario-card--image-true' : ''}`,
					},
					h(
						this.cardState.headingLevel, //tag
						{ className: this.getCardHeadingClasses() }, //attributes
						h('a', { 'href': this.getHref(), 'aria-label': this.ariaLabelText }, this.label),
					),
					this.description &&
						h(
							'div',
							{ key: 'f7dad07c4e39806379e3cdbd63d4edcc913859f9', class: 'ontario-card__description' },
							h('p', { key: 'ae429b791a870a174ad39610fd12d426fdb382cd' }, this.description),
						),
				),
			);
		}
		static get watchers() {
			return {
				layoutDirection: ['validateLayoutDirection'],
				headingLevel: ['validateHeadingLevel'],
				headerColour: ['validateHeaderColour'],
			};
		}
		static get style() {
			return ontarioCardCss;
		}
	},
	[
		1,
		'ontario-card',
		{
			label: [1],
			headingLevel: [1, 'heading-level'],
			image: [1],
			imageAltText: [1, 'image-alt-text'],
			description: [1],
			cardLink: [1, 'card-link'],
			layoutDirection: [1, 'layout-direction'],
			headerColour: [1, 'header-colour'],
			horizontalImagePositionType: [1, 'horizontal-image-position-type'],
			horizontalImageSizeType: [1, 'horizontal-image-size-type'],
			ariaLabelText: [1, 'aria-label-text'],
			cardState: [32],
		},
		undefined,
		{
			layoutDirection: ['validateLayoutDirection'],
			headingLevel: ['validateHeadingLevel'],
			headerColour: ['validateHeaderColour'],
		},
	],
);
function defineCustomElement$1() {
	if (typeof customElements === 'undefined') {
		return;
	}
	const components = ['ontario-card'];
	components.forEach((tagName) => {
		switch (tagName) {
			case 'ontario-card':
				if (!customElements.get(tagName)) {
					customElements.define(tagName, OntarioCard$1);
				}
				break;
		}
	});
}

const OntarioCard = OntarioCard$1;
const defineCustomElement = defineCustomElement$1;

export { OntarioCard, defineCustomElement };
//# sourceMappingURL=ontario-card.js.map

//# sourceMappingURL=ontario-card.js.map
