import { p as proxyCustomElement, H, h } from './index.js';
import { b as validateLanguage } from './p-CNqFEifG.js';
import { t as translations } from './p-DgMhpSmi.js';
import { d as defineCustomElement$3 } from './p-DyZbYpqr.js';
import { d as defineCustomElement$2 } from './p-pYZtHvSO.js';

const ontarioAccordionCss =
	'.ontario-accordion__button--expand-all:focus,.ontario-accordion__button:focus{box-shadow:0 0 0 4px #009ADB;outline:4px solid transparent;transition:box-shadow 0.1s ease-in-out}.ontario-accordion__button{font-style:normal;font-weight:700;text-rendering:optimizeLegibility;margin-bottom:1rem;font-feature-settings:normal;font-family:"Raleway", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif}.ontario-accordion__button{font-size:1.25rem;letter-spacing:0.03rem;line-height:1.5;margin:0 0 0.75rem 0;max-width:48rem}@media screen and (min-width: 40em){.ontario-accordion__button{font-size:1.5rem;letter-spacing:0.0313rem;line-height:1.5}}.ontario-accordions__container{max-width:48rem;width:100%}.ontario-accordion{border-top:2px solid #cccccc}.ontario-accordion:last-of-type{border-bottom:2px solid #cccccc}.ontario-accordion__controls{display:flex;justify-content:flex-end}.ontario-accordion__button,.ontario-accordion__button--expand-all{background:none;border:0;box-sizing:border-box}.ontario-accordion__button--expand-all{font-size:1rem;margin-bottom:0.5rem;color:#0066CC;cursor:pointer}.ontario-accordion__button--expand-all:focus,.ontario-accordion__button--expand-all:hover{color:#00478F;text-decoration:underline}.ontario-accordion__button--expand-all:active{color:#002142;text-decoration:underline}.ontario-accordion--expand-close-all{display:none}.ontario-accordion__controls--active .ontario-accordion--expand-close-all{display:block}.ontario-accordion__controls--active .ontario-accordion--expand-open-all{display:none}.ontario-accordion__button{display:flex;align-items:flex-start;color:#0066CC;cursor:pointer;padding:0.75rem 0.5rem;text-align:left;width:100%;margin-bottom:0}.ontario-accordion__button .ontario-accordion__button-icon--close,.ontario-accordion__button .ontario-accordion__button-icon--open{margin-right:0.5rem}.ontario-accordion__button .ontario-icon{width:1.75rem;height:1.75rem}.ontario-accordion__button:focus,.ontario-accordion__button:hover{background-color:#f2f2f2;color:#00478F}.ontario-accordion__button:focus{box-shadow:0 0 0 4px #009ADB inset}.ontario-accordion__button:active{color:#002142}.ontario-accordion__content{display:none;padding:0.75rem 0.75rem 2rem 0.75rem;margin-left:0}@media screen and (min-width: 40em){.ontario-accordion__content{margin-left:2rem}}.ontario-accordion__content *{margin-top:0;max-width:48rem;width:100%}.ontario-accordion__content ul,.ontario-accordion__content ol{max-width:calc(100% - 3rem)}.ontario-accordion__content>:last-child{margin-bottom:0}.ontario-accordion__button-icon--close,.ontario-expander--active .ontario-accordion__button-icon--open{display:none}.ontario-expander--active~.ontario-accordion__content,.ontario-expander--active .ontario-accordion__button-icon--close{display:block}.ontario-accordions__container .ontario-h1,.ontario-accordions__container .ontario-h2,.ontario-accordions__container .ontario-h3,.ontario-accordions__container .ontario-h4,.ontario-accordions__container .ontario-h5,.ontario-accordions__container p,.ontario-accordions__container h1,.ontario-accordions__container h2,.ontario-accordions__container h3,.ontario-accordions__container h4,.ontario-accordions__container h5,.ontario-accordions__container h6{margin:0}';

const OntarioAccordion$1 = /*@__PURE__*/ proxyCustomElement(
	class OntarioAccordion extends H {
		constructor() {
			super();
			this.__registerHost();
			this.__attachShadow();
		}
		get host() {
			return this;
		}
		/**
		 * The name of the accordion component.
		 *
		 * This is not optional.
		 */
		name;
		/**
		 * Custom Expand/Collapse button text.
		 *
		 * @example
		 *  <ontario-accordion
		 *		name="My Accordion"
		 *		expand-collapse-button='{
		 *			"expandAllSectionsLabel": "Expand All",
		 *			"collapseAllSectionsLabel": "Collapse All"
		 *		}'
		 *		accordion-data='[
		 *			{"label": "Accordion 1", "content": ["Item 1", "Item 2", "Item 3"]},
		 *			{"label": "Accordion 2", "content": ["Item A", "Item B", "Item C"]}
		 *		]'
		 *	></ontario-accordion>
		 */
		expandCollapseButton;
		/**
		 * Used to include individual accordion data for the accordion component.
		 * This is passed in as an array of objects with key-value pairs.
		 *
		 * The `content` is expecting a string, that can either be written as HTML or a just a plain string, depending on the accordionContentType.
		 *
		 * @example
		 * 	<ontario-accordion
		 *		name="My Accordion"
		 *		accordion-data='[
		 *			{"label": "Accordion 1", "content": "This is a string"},
		 *			{"label": "Accordion 2", "accordionContentType": "html", "content": "<ul><li>List A</li><li>List B</li><li>List C</li></ul>"}
		 *		]'
		 *	></ontario-accordion>
		 */
		accordionData;
		/**
		 * Used to show whether the accordion is opened or closed.
		 */
		isOpen = false;
		/**
		 * The language of the component.
		 * This is used for translations, and is by default set through event listeners checking for a language property from the header. If none are passed, it will default to English.
		 */
		language;
		/**
		 * This listens for the `setAppLanguage` event sent from the test language toggler when it is is connected to the DOM. It is used for the initial language when the input component loads.
		 */
		handleSetAppLanguage(event) {
			if (!this.language) {
				this.language = validateLanguage(event);
			}
		}
		/**
		 * Handle the language being toggled from the `<ontario-header>`.
		 * @param event Event object passed when the event is fired.
		 */
		handleHeaderLanguageToggled(event) {
			this.language = validateLanguage(event);
		}
		/**
		 * Store the translation dictionary for use within the component.
		 */
		translations = translations;
		/**
		 * The label for the expand/collapse button.
		 * This is internal and udpdated dynamically.
		 */
		expandCollapseLabel;
		/**
		 * Internal state of the expand/collapse label information.
		 */
		internalExpandCollapseLabelDetails;
		/**
		 * Internal state containing the parsed Accordion Data
		 */
		internalAccordionData = [];
		/**
		 * This state tracks which accordions are open.
		 */
		openAccordionIndexes = [];
		/**
		 * Parse Accordion data, this is used to handle JSON strings from HTML.
		 */
		parseAccordionData() {
			if (typeof this.accordionData !== 'undefined') {
				this.internalAccordionData = Array.isArray(this.accordionData)
					? this.accordionData
					: JSON.parse(this.accordionData);
			}
			// Initialize the label based on the initial accordion state
			this.updateLabel();
		}
		/**
		 * Parse Expand/Collapse Button Details, this is used to handle JSON strings from HTML.
		 */
		parseExpandCollapseButtonDetails() {
			if (typeof this.expandCollapseButton !== 'undefined') {
				this.internalExpandCollapseLabelDetails =
					typeof this.expandCollapseButton === 'string'
						? JSON.parse(this.expandCollapseButton)
						: this.expandCollapseButton;
			}
		}
		// Toggle the accordion state when it's clicked
		toggleAccordion(index) {
			if (this.openAccordionIndexes.includes(index)) {
				// If the accordion is already open, close it
				this.openAccordionIndexes = this.openAccordionIndexes.filter((i) => i !== index);
			} else {
				// If the accordion is closed, open it
				this.openAccordionIndexes = [...this.openAccordionIndexes, index];
			}
			this.updateLabel();
		}
		/**
		 * Toggle all accordions open/close
		 */
		toggleAll() {
			if (this.openAccordionIndexes.length === this.internalAccordionData.length) {
				// All accordions are open, close all
				this.openAccordionIndexes = [];
			} else {
				// At least one accordion is closed, open all
				this.openAccordionIndexes = this.internalAccordionData.map((_, index) => index);
			}
			this.updateLabel();
		}
		/**
		 * Update the label based on the current accordion state
		 */
		updateLabel() {
			const allOpen = this.internalAccordionData.every((_, index) => this.openAccordionIndexes.includes(index));
			if (allOpen) {
				// All accordions are open, set label to "Collapse all"
				this.expandCollapseLabel = 'collapse';
			} else {
				// At least one accordion is closed, set label to "Expand all"
				this.expandCollapseLabel = 'expand';
			}
		}
		componentWillLoad() {
			this.parseAccordionData();
			this.parseExpandCollapseButtonDetails();
			this.language = validateLanguage(this.language);
		}
		render() {
			return h(
				'div',
				{ key: '1ec9adce66ba9651eb72287a6268e041b8dc4fb3' },
				h('h2', { key: 'b13104816ae4a4ae5292afbc94ffb526c020babe' }, this.name),
				h(
					'div',
					{ key: '53e28363acaec45d55d0a021a68ebea3845b034d', class: 'ontario-accordions__container' },
					h(
						'div',
						{ key: 'eb4ee3f92067cce8ff9b169026eb1df0801fa230', class: 'ontario-accordion__controls' },
						h(
							'button',
							{
								'key': 'c018efcef59dcb152b3646e217df9b4ae09ed5c0',
								'class': 'ontario-accordion__button--expand-all',
								'onClick': () => this.toggleAll(),
								'aria-expanded':
									this.openAccordionIndexes.length === this.internalAccordionData.length ? 'true' : 'false',
								'aria-label': this.internalExpandCollapseLabelDetails?.ariaLabelText,
							},
							h(
								'span',
								{ key: '9e0f9959fb6f83e14b02e9843652d7a66a3fae54', class: 'ontario-accordion--expand-open-all' },
								this.expandCollapseLabel === 'expand'
									? h(
											'div',
											null,
											this.internalExpandCollapseLabelDetails?.expandAllSectionsLabel ??
												this.translations.accordion.expand[`${this.language}`],
										)
									: h(
											'div',
											null,
											this.internalExpandCollapseLabelDetails?.collapseAllSectionsLabel ??
												this.translations.accordion.collapse[`${this.language}`],
										),
							),
						),
					),
					this.internalAccordionData?.map((accordion, index) =>
						h(
							'div',
							{
								class: `ontario-accordion ${this.openAccordionIndexes.includes(index) ? 'open' : ''}`,
								key: `accordion-${index}`,
							},
							h(
								'h3',
								{
									class: `ontario-accordion__heading ${this.openAccordionIndexes.includes(index) ? 'ontario-expander--active' : ''}`,
								},
								h(
									'button',
									{
										'class': 'ontario-accordion__button',
										'aria-expanded': this.openAccordionIndexes.includes(index) ? 'true' : 'false',
										'data-toggle': 'ontario-collapse',
										'onClick': () => this.toggleAccordion(index),
										'aria-label': accordion.ariaLabelText,
									},
									h(
										'span',
										{ class: 'ontario-accordion__button-icon--close' },
										h('ontario-icon-chevron-up', { colour: 'blue' }),
									),
									h(
										'span',
										{ class: 'ontario-accordion__button-icon--open' },
										h('ontario-icon-chevron-down', { colour: 'blue' }),
									),
									accordion.label,
								),
							),
							h(
								'section',
								{
									'class': `ontario-accordion__content ${
										this.openAccordionIndexes.includes(index)
											? 'ontario-accordion__content--opened'
											: 'ontario-accordion__content--closed'
									}`,
									'aria-hidden': !this.openAccordionIndexes.includes(index),
									'data-toggle': 'ontario-expander-content',
								},
								accordion.accordionContentType === 'html'
									? h('div', { innerHTML: accordion.content }) // Render HTML content
									: h('div', null, accordion.content),
							),
						),
					),
				),
			);
		}
		static get watchers() {
			return {
				accordionData: ['parseAccordionData'],
				expandCollapseButton: ['parseExpandCollapseButtonDetails'],
			};
		}
		static get style() {
			return ontarioAccordionCss;
		}
	},
	[
		1,
		'ontario-accordion',
		{
			name: [1],
			expandCollapseButton: [1, 'expand-collapse-button'],
			accordionData: [1, 'accordion-data'],
			isOpen: [4, 'is-open'],
			language: [1025],
			translations: [32],
			expandCollapseLabel: [32],
			internalExpandCollapseLabelDetails: [32],
			internalAccordionData: [32],
			openAccordionIndexes: [32],
		},
		[
			[8, 'setAppLanguage', 'handleSetAppLanguage'],
			[8, 'headerLanguageToggled', 'handleHeaderLanguageToggled'],
		],
		{
			accordionData: ['parseAccordionData'],
			expandCollapseButton: ['parseExpandCollapseButtonDetails'],
		},
	],
);
function defineCustomElement$1() {
	if (typeof customElements === 'undefined') {
		return;
	}
	const components = ['ontario-accordion', 'ontario-icon-chevron-down', 'ontario-icon-chevron-up'];
	components.forEach((tagName) => {
		switch (tagName) {
			case 'ontario-accordion':
				if (!customElements.get(tagName)) {
					customElements.define(tagName, OntarioAccordion$1);
				}
				break;
			case 'ontario-icon-chevron-down':
				if (!customElements.get(tagName)) {
					defineCustomElement$3();
				}
				break;
			case 'ontario-icon-chevron-up':
				if (!customElements.get(tagName)) {
					defineCustomElement$2();
				}
				break;
		}
	});
}

const OntarioAccordion = OntarioAccordion$1;
const defineCustomElement = defineCustomElement$1;

export { OntarioAccordion, defineCustomElement };
//# sourceMappingURL=ontario-accordion.js.map

//# sourceMappingURL=ontario-accordion.js.map
