import { p as proxyCustomElement, H, h, F as Fragment } from './index.js';
import { C as ConsoleMessageClass } from './p-CJXRCL8b.js';
import { T as TaskStatuses, a as TaskToBadgeColour } from './p-A8xwC5QP.js';
import { v as validateValueAgainstArray, b as validateLanguage } from './p-CNqFEifG.js';
import { c as constructHintTextObject } from './p-CkusvkRr.js';
import { t as translations } from './p-DgMhpSmi.js';
import { d as defineCustomElement$3 } from './p-DFHrahxt.js';
import { d as defineCustomElement$2 } from './p-Br8HOVJk.js';

const ontarioTaskCss =
	'.ontario-task__link:focus .ontario-task__label{box-shadow:0 0 0 4px #009ADB;outline:4px solid transparent;transition:box-shadow 0.1s ease-in-out}.ontario-task{border-bottom:0.125rem solid #cccccc;padding:1.1875rem 0;list-style:none}.ontario-task__content{display:flex;justify-content:space-between;align-items:center}@media screen and (max-width: 40em){.ontario-task__content{display:flex;flex-direction:column;align-items:flex-start}}.ontario-task__label{text-align:left;margin:0;font-size:1.1875rem;font-weight:600;display:inline-block}@media screen and (max-width: 40em){.ontario-task__label{margin-bottom:0.5rem}}.ontario-task__label a{text-decoration:none;color:inherit}.ontario-task__label a:hover{text-decoration:underline}.ontario-task__link{display:block;text-decoration:underline;color:#0066CC;font-weight:normal}.ontario-task__hint-text--true{margin-bottom:0.5rem}.ontario-task__link:focus{outline:none;box-shadow:none}.ontario-task__link:focus .ontario-task__label{box-shadow:0 0 0 4px #009ADB inset}.ontario-task:has(.ontario-task__link):hover{background-color:#f2f2f2}.ontario-task--status-completed .ontario-task__link .ontario-task__label,.ontario-task--status-inprogress .ontario-task__link .ontario-task__label,.ontario-task--status-notstarted .ontario-task__link .ontario-task__label,.ontario-task--status-optional .ontario-task__link .ontario-task__label,.ontario-task--status-error .ontario-task__link .ontario-task__label{color:#0066CC;text-decoration:underline}.ontario-task--status-completed .ontario-task__link:visited .ontario-task__label,.ontario-task--status-inprogress .ontario-task__link:visited .ontario-task__label,.ontario-task--status-notstarted .ontario-task__link:visited .ontario-task__label,.ontario-task--status-optional .ontario-task__link:visited .ontario-task__label,.ontario-task--status-error .ontario-task__link:visited .ontario-task__label{color:#551A8B}.ontario-task--status-completed .ontario-task__link:hover .ontario-task__label,.ontario-task--status-inprogress .ontario-task__link:hover .ontario-task__label,.ontario-task--status-notstarted .ontario-task__link:hover .ontario-task__label,.ontario-task--status-optional .ontario-task__link:hover .ontario-task__label,.ontario-task--status-error .ontario-task__link:hover .ontario-task__label{color:#00478F}.ontario-task--status-completed .ontario-task__link:active .ontario-task__label,.ontario-task--status-inprogress .ontario-task__link:active .ontario-task__label,.ontario-task--status-notstarted .ontario-task__link:active .ontario-task__label,.ontario-task--status-optional .ontario-task__link:active .ontario-task__label,.ontario-task--status-error .ontario-task__link:active .ontario-task__label{color:#002142}ontario-hint-text::part(hint-text){margin:0}@media screen and (max-width: 40em){ontario-hint-text::part(hint-text){margin-top:0.5rem}}';

const OntarioTask$1 = /*@__PURE__*/ proxyCustomElement(
	class OntarioTask extends H {
		constructor() {
			super();
			this.__registerHost();
			this.__attachShadow();
		}
		get el() {
			return this;
		}
		// Reference to the ontario-hint-text element for this task.
		hintTextRef;
		/**
		 * Specifies the label of the task.
		 *
		 * This is required to provide the name of the task.
		 */
		label;
		/**
		 * A unique id for the task.
		 *
		 * This is required.
		 */
		taskId;
		/**
		 * Specifies an optional link associated with the task.
		 *
		 * If provided, clicking the task will navigate to this URL.
		 */
		link;
		/**
		 * Disables the task link when set to `true`.
		 *
		 * Default is `false`, meaning the link will be active if provided.
		 */
		deactivateLink = false;
		/**
		 * The language of the component.
		 *
		 * This is used for translations, and is by default set through event listeners checking for a language property from the header. If no language is passed, it will default to English.
		 */
		language;
		/**
		 * Used to include the ontario-hint-text component for the task.
		 *
		 * This is optional.
		 */
		hintText;
		/**
		 * Defines the status of the task, with default set to 'NotStarted'.
		 *
		 * Accepts values from `TaskStatuses` enum: `NotStarted`, `InProgress`, `Completed`.
		 */
		/**
		 * Defines the status of the task, with default set to 'NotStarted'.
		 *
		 * Accepts values from `TaskStatuses` enum: `NotStarted`, `InProgress`, `Completed`, etc.
		 */
		taskStatus = TaskStatuses.NotStarted;
		/**
		 * Allows consumers to define the heading level for the task label.
		 *
		 * Accepts 'h2', 'h3' or 'h4'. Default is 'h3'.
		 */
		headingLevel = 'h3';
		/**
		 * The hint text options are re-assigned to the internalHintText state.
		 */
		internalHintText;
		/**
		 * Mutable variable, for internal use only.
		 *
		 * Set the task's status state depending on validation result.
		 */
		taskStatusState = TaskStatuses.NotStarted;
		/**
		 * Watch for changes in `taskStatus` prop to validate its value.
		 */
		validateTaskStatus() {
			const validStatuses = Object.values(TaskStatuses);
			const isValidStatus = validStatuses.includes(this.taskStatus);
			this.taskStatusState = isValidStatus ? this.taskStatus : this.warnAndGetDefaultTaskStatus();
			// Update the `data-task-status` attribute
			this.el.setAttribute('data-task-status', this.taskStatusState);
		}
		/**
		 * Logs a warning to the console if the `taskStatus` prop is set to an invalid value.
		 *
		 * This function informs developers that the provided `taskStatus` is not recognized
		 * and resets the status to the default value of `'notStarted'`. The warning message
		 * specifies the valid task statuses to help guide correct usage.
		 *
		 * @returns The default task status `'notStarted'`.
		 */
		warnAndGetDefaultTaskStatus() {
			const validStatuses = Object.values(TaskStatuses).join(', ');
			const message = new ConsoleMessageClass();
			message
				.addDesignSystemTag()
				.addMonospaceText(' taskStatus ')
				.addRegularText('on')
				.addMonospaceText(' <ontario-task> ')
				.addRegularText('was set to an invalid taskStatus; only ')
				.addMonospaceText(validStatuses)
				.addRegularText(' are supported. The default taskStatus ')
				.addMonospaceText(TaskStatuses.NotStarted)
				.addRegularText(' is assumed.')
				.printMessage();
			return TaskStatuses.NotStarted;
		}
		/**
		 * Watch for changes in `headingLevel` prop to validate its value.
		 */
		validateHeadingLevel(newValue) {
			const allowedValues = ['h2', 'h3', 'h4'];
			// Validate the new value against the allowed values
			const isValid = validateValueAgainstArray(newValue, allowedValues);
			if (!isValid) {
				const message = new ConsoleMessageClass();
				message
					.addDesignSystemTag()
					.addMonospaceText(' headingLevel ')
					.addRegularText('on')
					.addMonospaceText(' <ontario-task> ')
					.addRegularText('was set to an invalid value; only ')
					.addMonospaceText(allowedValues.join(', '))
					.addRegularText(' are supported. The default value ')
					.addMonospaceText('h3')
					.addRegularText(' is assumed.')
					.printMessage();
				this.headingLevel = 'h3';
			}
		}
		/**
		 * Watch for changes in `hintText` prop and parse it if available.
		 *
		 * If a `hintText` prop is passed, the `constructHintTextObject` function will convert it to the correct format,
		 * and the result will be stored in the `internalHintText` state.
		 */
		parseHintText() {
			if (this.hintText) {
				const hintTextObject = constructHintTextObject(this.hintText);
				this.internalHintText = hintTextObject;
			}
		}
		/**
		 * Listen for app language settings on the window to update the component language.
		 */
		handleSetAppLanguage(event) {
			if (!this.language) {
				this.language = validateLanguage(event);
			}
		}
		/**
		 * This listens for the `headerLanguageToggled` event sent from the language toggle when it is connected to the DOM.
		 * It is used for changing the component language after the language toggle has been activated.
		 */
		handleHeaderLanguageToggled(event) {
			this.language = validateLanguage(event);
		}
		/**
		 * Determines the badge colour based on the current `taskStatusState`.
		 *
		 * @returns {TaskBadgeColour}
		 */
		getBadgeColour() {
			return TaskToBadgeColour[this.taskStatusState] || 'grey';
		}
		/**
		 * Provides a translated task status string based on the current language.
		 */
		getTranslatedTaskStatus() {
			const resolvedLanguage = validateLanguage(this.language);
			return translations.taskStatus[this.taskStatusState][resolvedLanguage];
		}
		/**
		 * Renders hint text if available.
		 */
		renderHintText() {
			if (this.internalHintText) {
				return h('ontario-hint-text', {
					hint: this.internalHintText.hint,
					hintContentType: this.internalHintText.hintContentType,
					ref: (el) => (this.hintTextRef = el),
				});
			}
			return null;
		}
		/**
		 * Returns the class name(s) for the task label.
		 */
		getClass() {
			return ['ontario-task__label', this.hintText && 'ontario-task__hint-text--true'].filter(Boolean).join(' ');
		}
		/**
		 * Renders the task label and status content.
		 *
		 * This includes dynamically rendering the heading element (h2, h3, or h4) based on the `headingLevel` prop,
		 * as well as the badge indicating the task status.
		 */
		renderTaskContent() {
			const headingProps = {
				id: `task-label--${this.taskId}`,
				class: this.getClass(),
			};
			return h(
				'div',
				{ class: 'ontario-task__content' },
				h(this.headingLevel, headingProps, this.label),
				this.taskStatusState &&
					h(
						'ontario-badge',
						{
							'class': 'ontario-task__badge',
							'role': 'status',
							'aria-label': `${translations.taskStatus.taskStatus[validateLanguage(this.language)]} ${this.getTranslatedTaskStatus()} (${this.taskStatusState})`,
							'colour': this.getBadgeColour(),
						},
						this.getTranslatedTaskStatus(),
					),
			);
		}
		/**
		 * After the component loads, retrieve the hint text ID (if available) from the hintText component,
		 * and set it for the `aria-describedby` attribute.
		 */
		async componentDidLoad() {
			if (this.hintTextRef) {
				let hintTextId = this.hintTextRef.elementId;
				if (!hintTextId) {
					hintTextId = `hint-text--${this.taskId}`;
					this.hintTextRef.elementId = hintTextId;
				}
				const taskElement = this.el.shadowRoot?.querySelector('li');
				if (taskElement) {
					taskElement.setAttribute('aria-describedby', hintTextId);
				}
			}
		}
		/**
		 * Lifecycle method: before the component loads, parse the hint text and
		 * validate language and task status and heading level.
		 */
		async componentWillLoad() {
			this.parseHintText();
			this.language = validateLanguage(this.language);
			this.validateTaskStatus();
			this.validateHeadingLevel(this.headingLevel);
		}
		render() {
			const isLinkActive = this.link && !this.deactivateLink;
			const taskStatusClass = `ontario-task-status--${this.taskStatusState.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()}`;
			const taskContent = h(
				Fragment,
				{ key: '4968807e30ded9336a79d517b25cd0bd35a14a3d' },
				this.renderTaskContent(),
				this.renderHintText(),
			);
			return h(
				'li',
				{
					'key': 'a000b87343f37fbdcee5e96cada8c0344e1a7218',
					'class': `ontario-task ${taskStatusClass}`,
					'role': 'group',
					'aria-labelledby': `task-label--${this.taskId}`,
					'data-task-status': this.taskStatusState,
				},
				isLinkActive
					? h('a', { 'href': this.link, 'class': 'ontario-task__link', 'aria-label': this.label }, taskContent)
					: h('div', null, taskContent),
			);
		}
		static get watchers() {
			return {
				taskStatus: ['validateTaskStatus'],
				headingLevel: ['validateHeadingLevel'],
				hintText: ['parseHintText'],
			};
		}
		static get style() {
			return ontarioTaskCss;
		}
	},
	[
		1,
		'ontario-task',
		{
			label: [1],
			taskId: [1, 'task-id'],
			link: [1],
			deactivateLink: [4, 'deactivate-link'],
			language: [1025],
			hintText: [1025, 'hint-text'],
			taskStatus: [1, 'task-status'],
			headingLevel: [1, 'heading-level'],
			internalHintText: [32],
			taskStatusState: [32],
		},
		[
			[8, 'setAppLanguage', 'handleSetAppLanguage'],
			[8, 'headerLanguageToggled', 'handleHeaderLanguageToggled'],
		],
		{
			taskStatus: ['validateTaskStatus'],
			headingLevel: ['validateHeadingLevel'],
			hintText: ['parseHintText'],
		},
	],
);
function defineCustomElement$1() {
	if (typeof customElements === 'undefined') {
		return;
	}
	const components = ['ontario-task', 'ontario-badge', 'ontario-hint-text'];
	components.forEach((tagName) => {
		switch (tagName) {
			case 'ontario-task':
				if (!customElements.get(tagName)) {
					customElements.define(tagName, OntarioTask$1);
				}
				break;
			case 'ontario-badge':
				if (!customElements.get(tagName)) {
					defineCustomElement$3();
				}
				break;
			case 'ontario-hint-text':
				if (!customElements.get(tagName)) {
					defineCustomElement$2();
				}
				break;
		}
	});
}

const OntarioTask = OntarioTask$1;
const defineCustomElement = defineCustomElement$1;

export { OntarioTask, defineCustomElement };
//# sourceMappingURL=ontario-task.js.map

//# sourceMappingURL=ontario-task.js.map
