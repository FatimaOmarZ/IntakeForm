{"file":"event-handler.js","mappings":";;;;AAAA,IAAY,kBAMX;AAND,CAAA,UAAY,kBAAkB,EAAA;AAC7B,IAAA,kBAAA,CAAA,wBAAA,CAAA,GAAA,wBAAiD;AACjD,IAAA,kBAAA,CAAA,sBAAA,CAAA,GAAA,kBAAyC;AACzC,IAAA,kBAAA,CAAA,kBAAA,CAAA,GAAA,cAAiC;AACjC,IAAA,kBAAA,CAAA,sBAAA,CAAA,GAAA,sBAA6C;AAC7C,IAAA,kBAAA,CAAA,sBAAA,CAAA,GAAA,sBAA6C;AAC9C,CAAC,EANW,kBAAkB,KAAlB,kBAAkB,GAM7B,EAAA,CAAA,CAAA;;MCAY,YAAY,CAAA;AACxB;;AAEG;AACH,IAAA,WAAW;AAEX;;AAEG;IACH,WAAW,GAAiB,SAAS;AAErC;;AAEG;IACH,QAAQ,GAAa,KAAK;AAE1B;;AAEG;IACH,QAAQ,GAAa,KAAK;AAE1B;;;AAGG;AACH,IAAA,gBAAgB;IAEhB,QAAQ,GAAQ,IAAI;AAEpB,IAAA,YAAY;AAEZ;;;;AAIG;AACH,IAAA,WAAA,CACC,gBAAwB,EACxB,OAAyB,EACzB,YAAiB,EACjB,QAAa,EACb,QAAoB,GAAA,KAAK,EACzB,QAAA,GAAoB,KAAK,EAAA;AAEzB,QAAA,IAAI,aAAsB;AAE1B,QAAA,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAChC,YAAA,IAAI;AACH,gBAAA,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAY;;AAC7C,YAAA,MAAM;gBACP,aAAa,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE;;;aAE3D;YACN,aAAa,GAAG,OAAO;;AAGxB,QAAA,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,iBAAiB,EAAE;AAC5D,QAAA,IAAI,CAAC,WAAW,GAAG,aAAa,EAAE,WAAW;AAC7C,QAAA,IAAI,CAAC,WAAW;YACf,CAAC,aAAa,EAAE,WAAW,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,KAAK,aAAa,CAAC,WAAW,EAAE,WAAW,EAAE,CAAC;AAC7G,gBAAA,SAAS;AACV,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;AACxB,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;AACxB,QAAA,IAAI,CAAC,YAAY,GAAG,YAAY;AAChC,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ;AAExB,QAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;;AAG3B;;;;;;AAMG;IACH,UAAU,GAAG,CACZ,UAA+B,EAC/B,eAAA,GAA2B,KAAK,EAChC,mBAAA,GAA+B,KAAK,KACpB;AAChB,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;AACtE,QAAA,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,IACnC,cAAQ,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAA;AAC5B,YAAA,IAAI,CAAC,WAAW,KAAK,SAAS,GAAG,CAAA,CAAA,IAAA,EAAA,IAAA,EAAK,IAAI,CAAC,WAAW,CAAM,GAAG,IAAI,CAAC,WAAW;AAC/E,YAAA,CAAC,mBAAmB,IAAI,IAAI,CAAC,sBAAsB,EAAE;YACrD,eAAe,IAAI,IAAI,CAAC,gCAAgC,CAAC,WAAW,EAAE,KAAK,CAAC,CACrE,KAET,CAAO,CAAA,OAAA,EAAA,EAAA,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAA;AAChD,YAAA,IAAI,CAAC,WAAW;AAChB,YAAA,CAAC,mBAAmB,IAAI,IAAI,CAAC,sBAAsB,EAAE;YACrD,eAAe,IAAI,IAAI,CAAC,gCAAgC,CAAC,WAAW,EAAE,KAAK,CAAC,CACtE,CACR;;QAGD,OAAO,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,cAAK,cAAc,CAAM,GAAG,cAAc;AACrG,KAAC;AAED,IAAA,gCAAgC,CAAC,WAAmB,EAAE,uBAAA,GAAmC,KAAK,EAAA;AAC7F,QAAA,MAAM,sBAAsB,IAC3B,CAAM,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,qBAAqB,EAAA;YAC/B,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;;YAAI,WAAW,CAAC,WAAW,EAAE;;YAAG,GAAG;AAC1F,YAAA,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC9D,CACP;AAED,QAAA,MAAM,mBAAmB,IACxB,CAAM,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,qBAAqB,EAAA;YAC/B,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;;YAAI,WAAW,CAAC,WAAW,EAAE;;YAAG,GAAG;AAC1F,YAAA,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC5D,CACP;AACD,QAAA,OAAO,IAAI,CAAC,gBAAgB,KAAK;cAC9B,CAAC;AACF,kBAAE;AACF,kBAAE;cACD,mBAAmB;;AAGvB;;;AAGG;IACK,mBAAmB,GAAA;QAC1B,OAAO,IAAI,CAAC;AACX,cAAE,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAG,CAAA;AACvE,cAAE,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG;;AAGzE;;;AAGG;IACK,sBAAsB,GAAA;QAC7B,OAAO,CAAA,CAAA,MAAA,EAAA,EAAM,KAAK,EAAC,qBAAqB,EAAA,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAQ;;AAG7E;;;AAGG;IACK,QAAQ,GAAA;QACf,OAAO,IAAI,CAAC,WAAW,KAAK,OAAO,IAAI,IAAI,CAAC,WAAW,KAAK;cACzD,IAAI,CAAC;AACN,kBAAE,CAAA,mDAAA,EAAsD,IAAI,CAAC,WAAW,CAAE;AAC1E,kBAAE,CAAA,6BAAA,EAAgC,IAAI,CAAC,WAAW,CAAE;cACnD,IAAI,CAAC;AACN,kBAAE;kBACA,eAAe;;AAGpB;;;;;;;AAOG;AACK,IAAA,eAAe,CAAC,OAAsB,EAAA;AAC7C,QAAA,IAAI,WAAW;;AAGf,QAAA,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;AACjD,YAAA,WAAW,GAAG,kBAAkB,CAAC,sBAAsB;;aACjD;;AAEN,YAAA,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AACzB,gBAAA,WAAW,GAAG,kBAAkB,CAAC,oBAAoB;;iBAC/C;;gBAEN,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;AACtC,oBAAA,WAAW,GAAG,kBAAkB,CAAC,gBAAgB;;;;AAKnD,YAAA,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AACzB,gBAAA,WAAW,GAAG,kBAAkB,CAAC,oBAAoB;;iBAC/C;;AAEN,gBAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAiB,CAAC,EAAE;AAC/E,oBAAA,WAAW,GAAG,kBAAkB,CAAC,oBAAoB;;;;QAKxD,IAAI,WAAW,EAAE;YAChB,MAAM,OAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC,kBAAkB,EAAE;AAE9D,YAAA,IAAI,WAAW,KAAK,kBAAkB,CAAC,sBAAsB,EAAE;gBAC9D;AACE,qBAAA,gBAAgB,CAChB,CACC,CAAA,EAAA,WAAW,KAAK,kBAAkB,CAAC,gBAAgB;oBACnD,WAAW,KAAK,kBAAkB,CAAC;AAClC,sBAAE;sBACA,aACJ,CAAA,CAAA,CAAG;qBAEH,cAAc,CAAC,uBAAuB,CAAC;;AAG1C,YAAA,OAAO,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,CAAI,CAAA,EAAA,IAAI,CAAC,gBAAgB,CAAA,CAAA,CAAG,CAAC;AAChH,YAAA,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC;;;AAI5E;;;;;;AAMG;AACK,IAAA,mBAAmB,CAC1B,WAA+B,EAC/B,OAA4B,EAC5B,mBAA2B,YAAY,EAAA;QAEvC,QAAQ,WAAW;;;;YAIlB,KAAK,kBAAkB,CAAC,sBAAsB;YAC9C,KAAK,kBAAkB,CAAC,oBAAoB;YAC5C,KAAK,kBAAkB,CAAC,gBAAgB;gBACvC;AACE,qBAAA,cAAc,CACd,CACC,EAAA,WAAW,KAAK,kBAAkB,CAAC;AAClC,sBAAE;sBACA,6BACJ,CAAA,uBAAA,CAAyB;AAEzB,qBAAA,gBAAgB,CAAC,CAAA,CAAA,EAAI,gBAAgB,CAAA,CAAA,CAAG;qBACxC,cAAc,CAAC,kBAAkB,CAAC;gBACpC;;YAGD,KAAK,kBAAkB,CAAC,oBAAoB;AAC3C,gBAAA,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC;gBAC9G;;YAGD,KAAK,kBAAkB,CAAC,oBAAoB;gBAC3C;qBACE,cAAc,CAAC,oCAAoC;qBACnD,gBAAgB,CAAC,qBAAqB;qBACtC,cAAc,CAAC,IAAI;qBACnB,gBAAgB,CAAC,SAAS;qBAC1B,cAAc,CAAC,sBAAsB;qBACrC,gBAAgB,CAAC,WAAW;qBAC5B,cAAc,CAAC,kBAAkB,CAAC;gBACpC;;QAGF,OAAO,CAAC,YAAY,EAAE;;AAEvB;;IC3QW;AAAZ,CAAA,UAAY,SAAS,EAAA;AACpB,IAAA,SAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;AACjB,IAAA,SAAA,CAAA,MAAA,CAAA,GAAA,MAAa;AACb,IAAA,SAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AACf,IAAA,SAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AAChB,CAAC,EALW,SAAS,KAAT,SAAS,GAKpB,EAAA,CAAA,CAAA;;ACKM,MAAM,gBAAgB,GAAG,CAC/B,KAAY,EACZ,SAAoB,EACpB,KAAgB,EAChB,gBAAmF,EACnF,eAAkD,EAClD,cAAiD,EACjD,eAA+C,EAC/C,IAAa,EACb,oBAA6C,EAC7C,mBAA4C,EAC5C,kBAA2C,EAC3C,mBAA4C,EAC5C,WAAyB,KACtB;AACH,IAAA,IAAI,SAAS,KAAK,SAAS,CAAC,KAAK,EAAE;QAClC,eAAe,EAAE,IAAI,CAAC;YACrB,EAAE,EAAE,KAAK,EAAE,EAAE;AACb,YAAA,KAAK,EAAG,KAAoB,CAAC,IAAI,IAAI,SAAS;YAC9C,SAAS,EAAG,KAAoB,CAAC,SAAS;AAC1C,SAAA,CAAC;AAEF,QAAA,mBAAmB,IAAI,mBAAmB,CAAC,KAAK,CAAC;;AAGlD,IAAA,IAAI,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE;QACnC,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,UAAU,EAAE;AAC5C,YAAA,IAAI,KAAK,YAAY,gBAAgB,EAAE;gBACtC,gBAAgB,CAAC,IAAI,CAAC;oBACrB,OAAO,EAAE,KAAK,EAAE,OAAO;oBACvB,EAAE,EAAE,KAAK,EAAE,EAAE;oBACb,KAAK,EAAE,KAAK,EAAE,KAAK;AACnB,iBAAA,CAAC;;;aAEG;YACN,gBAAgB,CAAC,IAAI,CAAC;gBACrB,EAAE,EAAE,KAAK,EAAE,EAAE;gBACb,KAAK,EAAE,KAAK,EAAE,KAAK;AACnB,aAAA,CAAC;;AAGH,QAAA,oBAAoB,IAAI,oBAAoB,CAAC,KAAK,CAAC;;;QAInD,WAAW,IAAI,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,KAAK,CAAC;;AAGxD,IAAA,IAAI,SAAS,KAAK,SAAS,CAAC,KAAK,EAAE;QAClC,eAAe,CAAC,IAAI,CAAC;YACpB,EAAE,EAAE,KAAK,EAAE,EAAE;AACb,YAAA,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,KAAK,EAAE,KAAK;AACnB,SAAA,CAAC;AAEF,QAAA,mBAAmB,IAAI,mBAAmB,CAAC,KAAK,CAAC;;AAGlD,IAAA,IAAI,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;QACjC,cAAc,CAAC,IAAI,CAAC;YACnB,EAAE,EAAE,KAAK,EAAE,EAAE;AACb,YAAA,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,KAAK,EAAE,KAAK;AACnB,SAAA,CAAC;AAEF,QAAA,kBAAkB,IAAI,kBAAkB,CAAC,KAAK,CAAC;;AAEjD;AAEA;;;;;;AAMG;AACU,MAAA,SAAS,GAAG,CAAC,OAAoB,EAAE,IAAY,EAAE,MAAY,KAAI;IAC7E,OAAO,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;AACxF;;;;","names":[],"sources":["src/utils/common/input-caption/input-caption.enum.ts","src/utils/common/input-caption/input-caption.tsx","src/utils/events/event-handler.interface.ts","src/utils/events/event-handler.ts"],"sourcesContent":["export enum MessageContentType {\n\tUndefinedCaptionObject = 'undefinedCaptionObject',\n\tUndefinedCaptionText = 'undefinedCaption',\n\tEmptyCaptionText = 'emptyCaption',\n\tUndefinedCaptionType = 'undefinedCaptionType',\n\tIncorrectCaptionType = 'incorrectCaptionType',\n}\n","import { h } from '@stencil/core';\nimport { CaptionType, CaptionTypes } from './input-caption.types';\nimport { MessageContentType } from './input-caption.enum';\nimport { CaptionInfo, Caption } from './caption.interface';\nimport { ConsoleMessageClass } from '../../console-message/console-message';\n\nexport class InputCaption implements CaptionInfo {\n\t/**\n\t * The text to display as caption.\n\t */\n\tcaptionText: string;\n\n\t/**\n\t * The type of caption to render.\n\t */\n\tcaptionType?: CaptionType = 'default';\n\n\t/**\n\t * Determine whether the input field is required.\n\t */\n\trequired?: boolean = false;\n\n\t/**\n\t * Determine whether the rendered element is a `<label>` or `<legend>`.\n\t */\n\tisLegend?: boolean = false;\n\n\t/**\n\t * Name of the component instantiating the class.\n\t * This is used for validation warning message.\n\t */\n\tcomponentTagName: string;\n\n\tlanguage: any = 'en';\n\n\ttranslations: any;\n\n\t/**\n\t * Set the class members\n\t * Output a console warning message if the provided `label` type is incorrect\n\t * @param caption object containing the essential data to configure the input label\n\t */\n\tconstructor(\n\t\tcomponentTagName: string,\n\t\tcaption: Caption | string,\n\t\ttranslations: any,\n\t\tlanguage: any,\n\t\tisLegend: boolean = false,\n\t\trequired: boolean = false,\n\t) {\n\t\tlet captionObject: Caption;\n\n\t\tif (typeof caption === 'string') {\n\t\t\ttry {\n\t\t\t\tcaptionObject = JSON.parse(caption) as Caption;\n\t\t\t} catch {\n\t\t\t\tcaptionObject = { captionText: caption, captionType: 'default' };\n\t\t\t}\n\t\t} else {\n\t\t\tcaptionObject = caption;\n\t\t}\n\n\t\tthis.componentTagName = componentTagName.toLocaleLowerCase();\n\t\tthis.captionText = captionObject?.captionText;\n\t\tthis.captionType =\n\t\t\t(captionObject?.captionType && CaptionTypes.find((type) => type === captionObject.captionType?.toLowerCase())) ||\n\t\t\t'default';\n\t\tthis.required = required;\n\t\tthis.isLegend = isLegend;\n\t\tthis.translations = translations;\n\t\tthis.language = language;\n\n\t\tthis.validateCaption(this);\n\t}\n\n\t/**\n\t * Return the `<label>` element for text inputs\n\t * @param captionFor Set the `htmlFor` attribute\n\t * @param hasHintExpander Indicate whether the component the label is for has a hint expander or not\n\t * @param disableRequiredFlag Disable the required/optional label text _(only use in highly special cases)_\n\t * @returns element containing the caption for the input\n\t */\n\tgetCaption = (\n\t\tcaptionFor?: string | undefined,\n\t\thasHintExpander: boolean = false,\n\t\tdisableRequiredFlag: boolean = false,\n\t): HTMLElement => {\n\t\tconst captionText = this.captionText && this.captionText.toLowerCase();\n\t\tconst captionContent = this.isLegend ? (\n\t\t\t<legend class={this.getClass()}>\n\t\t\t\t{this.captionType === 'heading' ? <h1>{this.captionText}</h1> : this.captionText}\n\t\t\t\t{!disableRequiredFlag && this.getRequiredFlagElement()}\n\t\t\t\t{hasHintExpander && this.getHintExpanderAccessibilityText(captionText, false)}\n\t\t\t</legend>\n\t\t) : (\n\t\t\t<label htmlFor={captionFor} class={this.getClass()}>\n\t\t\t\t{this.captionText}\n\t\t\t\t{!disableRequiredFlag && this.getRequiredFlagElement()}\n\t\t\t\t{hasHintExpander && this.getHintExpanderAccessibilityText(captionText, false)}\n\t\t\t</label>\n\t\t);\n\n\t\t// with `this.captionType` already set to one of the enum values, the comparison no longer needs the `toLowerCase()` transform\n\t\treturn this.captionType === 'heading' && !this.isLegend ? <h1>{captionContent}</h1> : captionContent;\n\t};\n\n\tgetHintExpanderAccessibilityText(captionText: string, hasHintExpanderOnOption: boolean = false): HTMLElement {\n\t\tconst multipleOptionsMessage = (\n\t\t\t<span class=\"ontario-show-for-sr\">\n\t\t\t\t{this.translations.accessibility.moreInfo[this.language]} \"{captionText.toLowerCase()}\"{' '}\n\t\t\t\t{this.translations.accessibility.checkboxHintExpander[this.language]}\n\t\t\t</span>\n\t\t);\n\n\t\tconst singleOptionMessage = (\n\t\t\t<span class=\"ontario-show-for-sr\">\n\t\t\t\t{this.translations.accessibility.moreInfo[this.language]} \"{captionText.toLowerCase()}\"{' '}\n\t\t\t\t{this.translations.accessibility.singleHintExpander[this.language]}\n\t\t\t</span>\n\t\t);\n\t\treturn this.componentTagName === 'ontario-checkboxes'\n\t\t\t? !hasHintExpanderOnOption\n\t\t\t\t? multipleOptionsMessage\n\t\t\t\t: singleOptionMessage\n\t\t\t: singleOptionMessage;\n\t}\n\n\t/**\n\t * Determines which flag text to use between `required` and `optional`\n\t * @returns `required` or `optional` flag text\n\t */\n\tprivate getRequiredFlagText(): string {\n\t\treturn this.required\n\t\t\t? this.translations && `(${this.translations.required[this.language]})`\n\t\t\t: this.translations && `(${this.translations.optional[this.language]})`;\n\t}\n\n\t/**\n\t * Get the HTML for the required/optional flag.\n\t * @returns CSS class for the label/legend.\n\t */\n\tprivate getRequiredFlagElement(): HTMLElement {\n\t\treturn <span class=\"ontario-label__flag\">{this.getRequiredFlagText()}</span>;\n\t}\n\n\t/**\n\t * Get the CSS class for the `label` element.\n\t * @returns CSS class for the `label` element.\n\t */\n\tprivate getClass(): string {\n\t\treturn this.captionType === 'large' || this.captionType === 'heading'\n\t\t\t? this.isLegend\n\t\t\t\t? `ontario-fieldset__legend ontario-fieldset__legend--${this.captionType}`\n\t\t\t\t: `ontario-label ontario-label--${this.captionType}`\n\t\t\t: this.isLegend\n\t\t\t\t? 'ontario-fieldset__legend'\n\t\t\t\t: 'ontario-label';\n\t}\n\n\t/**\n\t * Validate caption input by user and output warning message to the console if:\n\t * 1. the `caption` object is not provided\n\t * 2. the `captionText` property of the `caption` object is not provided\n\t * 3. the `captionText` property of the `caption` object is empty or contain only spaces\n\t * 4. the `captionType` property of the `caption` object is not provided\n\t * 5. the `captionType` property of the `caption` object is incorrect\n\t */\n\tprivate validateCaption(caption?: InputCaption) {\n\t\tlet messageType;\n\n\t\t// undefined `caption` object\n\t\tif (!caption || Object.keys(caption).length <= 0) {\n\t\t\tmessageType = MessageContentType.UndefinedCaptionObject;\n\t\t} else {\n\t\t\t// undefined `captionText` property\n\t\t\tif (!caption.captionText) {\n\t\t\t\tmessageType = MessageContentType.UndefinedCaptionText;\n\t\t\t} else {\n\t\t\t\t// `captionText` that is empty or contains only spaces\n\t\t\t\tif (/^\\s*$/.test(caption.captionText)) {\n\t\t\t\t\tmessageType = MessageContentType.EmptyCaptionText;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// undefined `captionType`\n\t\t\tif (!caption.captionType) {\n\t\t\t\tmessageType = MessageContentType.UndefinedCaptionType;\n\t\t\t} else {\n\t\t\t\t// incorrect `captionType`\n\t\t\t\tif (!CaptionTypes.includes(caption?.captionType?.toLowerCase() as CaptionType)) {\n\t\t\t\t\tmessageType = MessageContentType.IncorrectCaptionType;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (messageType) {\n\t\t\tconst message = new ConsoleMessageClass().addDesignSystemTag();\n\n\t\t\tif (messageType !== MessageContentType.UndefinedCaptionObject) {\n\t\t\t\tmessage\n\t\t\t\t\t.addMonospaceText(\n\t\t\t\t\t\t` ${\n\t\t\t\t\t\t\tmessageType === MessageContentType.EmptyCaptionText ||\n\t\t\t\t\t\t\tmessageType === MessageContentType.UndefinedCaptionText\n\t\t\t\t\t\t\t\t? 'caption or captionText'\n\t\t\t\t\t\t\t\t: 'captionType'\n\t\t\t\t\t\t} `,\n\t\t\t\t\t)\n\t\t\t\t\t.addRegularText('object or property of');\n\t\t\t}\n\n\t\t\tmessage.addMonospaceText(' caption ').addRegularText('object on').addMonospaceText(` ${this.componentTagName} `);\n\t\t\tthis.printConsoleMessage(messageType, message, this.getRequiredFlagText());\n\t\t}\n\t}\n\n\t/**\n\t * Generate the content of warning message to be printed to the console\n\t * @param messageType determine the content of warning message to output\n\t * @param componentTagName the tag name of the component that's emitting the warning message\n\t * @param requiredFlagText accepts a string value to be used as the required flag text and defaults to `(optional)` if not set\n\t * @returns an array of `ConsoleMessage` objects containing the message and associated styles to be printed to the console\n\t */\n\tprivate printConsoleMessage(\n\t\tmessageType: MessageContentType,\n\t\tmessage: ConsoleMessageClass,\n\t\trequiredFlagText: string = '(optional)',\n\t) {\n\t\tswitch (messageType) {\n\t\t\t// undefinedCaptionObject example: caption object on <ontario-input> is required but not defined. A blank followed by a (optional) flag is assumed.\n\t\t\t// undefinedCaptionText example: captionText property of caption object on <ontario-input> is required but not defined. A blank followed by a (optional) flag is assumed.\n\t\t\t// EmptyCaptionText example: captionText property of caption object on <ontario-input> is empty or contains only spaces. A blank followed by a (optional) flag is assumed.\n\t\t\tcase MessageContentType.UndefinedCaptionObject:\n\t\t\tcase MessageContentType.UndefinedCaptionText:\n\t\t\tcase MessageContentType.EmptyCaptionText:\n\t\t\t\tmessage\n\t\t\t\t\t.addRegularText(\n\t\t\t\t\t\t`${\n\t\t\t\t\t\t\tmessageType === MessageContentType.EmptyCaptionText\n\t\t\t\t\t\t\t\t? 'is empty or contains only spaces'\n\t\t\t\t\t\t\t\t: 'is required but not defined'\n\t\t\t\t\t\t}. A blank followed by a`,\n\t\t\t\t\t)\n\t\t\t\t\t.addMonospaceText(` ${requiredFlagText} `)\n\t\t\t\t\t.addRegularText('flag is assumed.');\n\t\t\t\tbreak;\n\n\t\t\t// UndefinedCaptionType example: captionType property of caption object on <ontario-input> is not defined. The default type is assumed.\n\t\t\tcase MessageContentType.UndefinedCaptionType:\n\t\t\t\tmessage.addRegularText('is not defined. The').addMonospaceText(' default ').addRegularText('type is assumed.');\n\t\t\t\tbreak;\n\n\t\t\t// IncorrectCaptionType example: captionType property of caption object on <ontario-input> was set to an incorrect type; only default, heading or large type is allowed. The default type is assumed.\n\t\t\tcase MessageContentType.IncorrectCaptionType:\n\t\t\t\tmessage\n\t\t\t\t\t.addRegularText('was set to an incorrect type; only')\n\t\t\t\t\t.addMonospaceText(' default, heading, ')\n\t\t\t\t\t.addRegularText('or')\n\t\t\t\t\t.addMonospaceText(' large ')\n\t\t\t\t\t.addRegularText('type is allowed. The')\n\t\t\t\t\t.addMonospaceText(' default ')\n\t\t\t\t\t.addRegularText('type is assumed.');\n\t\t\t\tbreak;\n\t\t}\n\n\t\tmessage.printMessage();\n\t}\n}\n","export enum EventType {\n\tChange = 'change',\n\tBlur = 'blur',\n\tFocus = 'focus',\n\tInput = 'input',\n}\n\nexport type InputInteractionEvent = {\n\tid?: string;\n\tvalue?: string;\n};\n\nexport type InputInputEvent = InputInteractionEvent & {\n\tinputType?: string;\n};\n\nexport type RadioAndCheckboxChangeEvent = InputInteractionEvent & {\n\tchecked: boolean;\n};\n\nexport type InputFocusBlurEvent = InputInteractionEvent & {\n\tfocused: boolean;\n};\n\nexport type InputType = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement | null;\n","import { EventEmitter } from '@stencil/core';\nimport {\n\tInputType,\n\tEventType,\n\tInputFocusBlurEvent,\n\tInputInteractionEvent,\n\tRadioAndCheckboxChangeEvent,\n\tInputInputEvent,\n} from './event-handler.interface';\n\nexport const handleInputEvent = (\n\tevent: Event,\n\teventType: EventType,\n\tinput: InputType,\n\tinputChangeEvent: EventEmitter<InputInteractionEvent | RadioAndCheckboxChangeEvent>,\n\tinputFocusEvent: EventEmitter<InputFocusBlurEvent>,\n\tinputBlurEvent: EventEmitter<InputFocusBlurEvent>,\n\tinputInputEvent?: EventEmitter<InputInputEvent>,\n\ttype?: string,\n\tcustomChangeFunction?: (event: Event) => void,\n\tcustomFocusFunction?: (event: Event) => void,\n\tcustomBlurFunction?: (event: Event) => void,\n\tcustomInputFunction?: (event: Event) => void,\n\thostElement?: HTMLElement,\n) => {\n\tif (eventType === EventType.Input) {\n\t\tinputInputEvent?.emit({\n\t\t\tid: input?.id,\n\t\t\tvalue: (event as InputEvent).data ?? undefined,\n\t\t\tinputType: (event as InputEvent).inputType,\n\t\t});\n\n\t\tcustomInputFunction && customInputFunction(event);\n\t}\n\n\tif (eventType === EventType.Change) {\n\t\tif (type === 'radio' || type === 'checkbox') {\n\t\t\tif (input instanceof HTMLInputElement) {\n\t\t\t\tinputChangeEvent.emit({\n\t\t\t\t\tchecked: input?.checked,\n\t\t\t\t\tid: input?.id,\n\t\t\t\t\tvalue: input?.value,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tinputChangeEvent.emit({\n\t\t\t\tid: input?.id,\n\t\t\t\tvalue: input?.value,\n\t\t\t});\n\t\t}\n\n\t\tcustomChangeFunction && customChangeFunction(event);\n\n\t\t// Note: Change events don't have composable set to true and don't cross the ShadowDOM boundary.\n\t\t// This will emit an event so the normal `onChange` event pattern is maintained.\n\t\thostElement && emitEvent(hostElement, eventType, event);\n\t}\n\n\tif (eventType === EventType.Focus) {\n\t\tinputFocusEvent.emit({\n\t\t\tid: input?.id,\n\t\t\tfocused: true,\n\t\t\tvalue: input?.value,\n\t\t});\n\n\t\tcustomFocusFunction && customFocusFunction(event);\n\t}\n\n\tif (eventType === EventType.Blur) {\n\t\tinputBlurEvent.emit({\n\t\t\tid: input?.id,\n\t\t\tfocused: false,\n\t\t\tvalue: input?.value,\n\t\t});\n\n\t\tcustomBlurFunction && customBlurFunction(event);\n\t}\n};\n\n/**\n * Emit a custom event that can be subscribed to by an event listener.\n *\n * @param element Component host element, see https://stenciljs.com/docs/host-element\n * @param name name of the event\n * @param detail any relevant details, like the original event\n */\nexport const emitEvent = (element: HTMLElement, name: string, detail?: any) => {\n\telement.dispatchEvent(new CustomEvent(name, { composed: true, bubbles: true, detail }));\n};\n"],"version":3}