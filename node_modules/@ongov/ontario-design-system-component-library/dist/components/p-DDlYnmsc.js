import { p as proxyCustomElement, H, c as createEvent, h, F as Fragment } from './index.js';
import { t as translations } from './p-DgMhpSmi.js';
import { v as validateValueAgainstArray } from './p-CNqFEifG.js';
import { C as ConsoleMessageClass } from './p-CJXRCL8b.js';
import { g as getRootHTMLElement, p as printArray } from './p-DQi-JVyL.js';

const supportedLanguages = ['en', 'fr'];

const ontarioLanguageToggleCss =
	'.ontario-language-toggler:focus{box-shadow:0 0 0 4px #009ADB;outline:4px solid transparent;transition:box-shadow 0.1s ease-in-out}.ontario-hide{display:none !important}.ontario-invisible{visibility:hidden !important}@media screen and (max-width: 39.99875em){.ontario-hide-for-small-only{display:none !important}}@media screen and (max-width: 0em), screen and (min-width: 40em){.ontario-show-for-small-only{display:none !important}}@media print, screen and (min-width: 40em){.ontario-hide-for-medium{display:none !important}}@media screen and (max-width: 39.99875em){.ontario-show-for-medium{display:none !important}}@media screen and (min-width: 40em) and (max-width: 72.99875em){.ontario-hide-for-medium-only{display:none !important}}@media screen and (max-width: 39.99875em), screen and (min-width: 73em){.ontario-show-for-medium-only{display:none !important}}@media print, screen and (min-width: 73em){.ontario-hide-for-large{display:none !important}}@media screen and (max-width: 72.99875em){.ontario-show-for-large{display:none !important}}@media screen and (min-width: 73em) and (max-width: 95.99875em){.ontario-hide-for-large-only{display:none !important}}@media screen and (max-width: 72.99875em), screen and (min-width: 96em){.ontario-show-for-large-only{display:none !important}}.ontario-show-for-sr,.ontario-show-on-focus{position:absolute;width:1px;height:1px;overflow:hidden;clip:rect(0, 0, 0, 0)}.ontario-show-on-focus:active,.ontario-show-on-focus:focus{position:static;width:auto;height:auto;overflow:visible;clip:auto}.ontario-show-for-landscape,.ontario-hide-for-portrait{display:block !important}@media screen and (orientation: landscape){.ontario-show-for-landscape,.ontario-hide-for-portrait{display:block !important}}@media screen and (orientation: portrait){.ontario-show-for-landscape,.ontario-hide-for-portrait{display:none !important}}.ontario-hide-for-landscape,.ontario-show-for-portrait{display:none !important}@media screen and (orientation: landscape){.ontario-hide-for-landscape,.ontario-show-for-portrait{display:none !important}}@media screen and (orientation: portrait){.ontario-hide-for-landscape,.ontario-show-for-portrait{display:block !important}}.ontario-language-toggler{background-color:#1a1a1a;border:none;border-radius:4px;box-sizing:border-box;box-shadow:none;color:#FFFFFF;cursor:pointer;display:flex;align-items:center;font-size:1.125rem;font-weight:600;font-family:"Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;height:48px;line-height:1.5555555556;text-align:center;text-decoration:none}.ontario-language-toggler:hover{background-color:#4d4d4d}.ontario-language-toggler:active{background-color:#666666;color:#FFFFFF}.ontario-language-toggler:focus{background-color:#4d4d4d;color:#FFFFFF}.ontario-language-toggler:visited{color:#FFFFFF}.ontario-language-toggler abbr[title]{text-decoration:none}.ontario-language-toggler--default{padding:0.75rem}.ontario-language-toggler--small{font-size:1rem;line-height:1.375rem;height:auto;outline:none;padding:0.5rem 0.75rem}';

const OntarioLanguageToggle = /*@__PURE__*/ proxyCustomElement(
	class OntarioLanguageToggle extends H {
		constructor() {
			super();
			this.__registerHost();
			this.__attachShadow();
			this.setAppLanguage = createEvent(this, 'setAppLanguage');
			this.headerLanguageToggled = createEvent(this, 'headerLanguageToggled');
		}
		/**
		 * The language of the component.
		 *
		 * In most cases, the language toggle should be the source of truth for determining the site language.
		 *
		 * Only pass a language value here if necessary.
		 */
		language;
		/**
		 * The size of the language toggle button.
		 *
		 * If no prop is passed, it will be set to the `default` size.
		 */
		size = 'default';
		/**
		 * The URL to change to when the language toggle button is clicked.
		 *
		 * This is optional.
		 */
		url;
		/**
		 * A custom function to pass to the language toggle button.
		 *
		 * This is optional.
		 */
		customLanguageToggle;
		translations = translations;
		/**
		 * Internal state used as the source of truth for component language.
		 */
		languageState;
		/**
		 * Internal state used to render the text on the language toggle UI.
		 */
		oppositeLanguageLabel = undefined;
		/**
		 * Updates the language and languageState props when changes to the language prop are detected.
		 */
		updateLanguage() {
			if (this.language) {
				if (!validateValueAgainstArray(this.language, supportedLanguages)) {
					this.showLanguageWarning(this.language);
					this.language = this.translations.siteLanguage.abbreviation.en;
				}
				this.languageState = this.language;
			}
			this.setAppLanguageHandler();
		}
		/**
		 * Event that fires during the setAppLanguageHandler() method.
		 *
		 * The event contains the current language (after language logic has already occurred).
		 */
		setAppLanguage;
		/**
		 * Event that fires when the language toggle is pressed/clicked.
		 *
		 * The event contains the oldLanguage along with the newLanguage.
		 */
		headerLanguageToggled;
		/**
		 * This function sets the languageState (if not already set).
		 *
		 * It also emits the setAppLanguage() event, updates the component language label, and
		 * updates the <html> tag lang attribute with the languageState value.
		 *
		 * It gets called by the connectedCallback() component lifecycle hook, and by the
		 * updateLanguage() method, which is fired on the watch for the language prop.
		 */
		setAppLanguageHandler() {
			const defaultLang = this.translations.siteLanguage.abbreviation.en;
			const rootLang = getRootHTMLElement()?.lang;
			// If languageState is not set, set it equal to the following cadence:
			// language prop value, <html> tag lang attribute, or default to "en"
			if (!this.languageState) {
				if (this.language) {
					this.languageState = this.language;
				} else if (rootLang) {
					if (validateValueAgainstArray(rootLang, supportedLanguages)) {
						this.languageState = rootLang;
					} else {
						this.showLanguageWarning(rootLang, 'document');
						this.languageState = defaultLang;
					}
				} else {
					this.languageState = defaultLang;
				}
			}
			this.setAppLanguage.emit(this.languageState);
			this.oppositeLanguageLabel = {
				fullWord: this.getOppositeLanguageFullWord(),
				abbreviation: this.getOppositeLanguageAbbrievation(),
			};
			this.updateHTMLLang();
		}
		/**
		 * An event that emits to other components that the language toggle button has been toggled.
		 *
		 * @param {Language} oldLanguage - The language prior to the language toggle being pressed.
		 * @param {globalThis.Event} event - event that triggered the function (e.g. onclick).
		 */
		handleHeaderLanguageToggled(oldLanguage, event) {
			this.languageState =
				oldLanguage === this.translations.siteLanguage.abbreviation.en
					? this.translations.siteLanguage.abbreviation.fr
					: this.translations.siteLanguage.abbreviation.en;
			this.headerLanguageToggled.emit({ oldLanguage: oldLanguage, newLanguage: this.languageState });
			this.updateHTMLLang();
			if (this.customLanguageToggle && event) {
				this.customLanguageToggle(event);
			}
		}
		/**
		 * Prints a warning message to the console about using an incorrect language for the component.
		 *
		 * @param {string} lang - The incorrect language that was received.
		 * @param {string} type - prop/document | Where the incorrect language is coming from.
		 */
		showLanguageWarning(lang, type = 'prop') {
			const propOrDocumentMessage =
				type === 'prop' ? `The language prop value of ${lang} ` : `The HTML document lang attribute value of ${lang} `;
			const message = new ConsoleMessageClass();
			message
				.addDesignSystemTag()
				.addRegularText(propOrDocumentMessage)
				.addRegularText('is not a valid language value for the ')
				.addMonospaceText(' <ontario-language-toggle> ')
				.addRegularText(`component. Valid language values are ${printArray([...supportedLanguages])}. `)
				.addRegularText(
					`A default language value of ${this.translations.siteLanguage.abbreviation.en} will be applied.`,
				)
				.printMessage();
		}
		/**
		 * Returns abbreviated text for the opposite language.
		 *
		 * @returns {Language}
		 */
		getOppositeLanguageAbbrievation() {
			return this.languageState === this.translations.siteLanguage.abbreviation.en
				? this.translations.siteLanguage.abbreviation.fr
				: this.translations.siteLanguage.abbreviation.en;
		}
		/**
		 * Returns full word text for the opposite language.
		 *
		 * @returns {string}
		 */
		getOppositeLanguageFullWord() {
			return this.languageState === this.translations.siteLanguage.abbreviation.en
				? this.translations.siteLanguage.fullWord.fr
				: this.translations.siteLanguage.fullWord.en;
		}
		/*
		 * Updates the <html> lang attribute based on component languageState.
		 */
		updateHTMLLang = () => {
			const htmlElement = getRootHTMLElement();
			if (htmlElement) {
				htmlElement.setAttribute('lang', this.languageState);
			}
		};
		/**
		 * Component life cycle hook.
		 *
		 * https://stenciljs.com/docs/component-lifecycle#connectedcallback
		 */
		connectedCallback() {
			this.setAppLanguageHandler();
		}
		/**
		 * Component life cycle hook.
		 *
		 * https://stenciljs.com/docs/component-lifecycle#componentdidload
		 */
		componentDidLoad() {
			/**
			 * Creates a MutationObserver (a type of watch) on the <html> tag lang attribute.
			 *
			 * When changes occur, the oppositeLanguageLabel state variable regenerates.
			 *
			 * This is to act as a form of callback and create a subtle delay between page content
			 * updating and the language toggle label updating.
			 */
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					switch (mutation.type) {
						case 'attributes':
							switch (mutation.attributeName) {
								case 'lang':
									this.oppositeLanguageLabel = {
										fullWord: this.getOppositeLanguageFullWord(),
										abbreviation: this.getOppositeLanguageAbbrievation(),
									};
									break;
							}
							break;
					}
				});
			});
			// Only create/trigger the MutationObserver if the <html> element exists.
			if (getRootHTMLElement()) {
				const options = { attributes: true };
				observer.observe(getRootHTMLElement(), options);
			}
		}
		render() {
			return h(
				'a',
				{
					'key': '6c86a21b82c98dfad80eb1095af399847286c6bd',
					'aria-label': this.translations.languageToggle.ariaLabel[`${this.oppositeLanguageLabel?.abbreviation}`],
					'class':
						this.size === 'default'
							? 'ontario-language-toggler ontario-language-toggler--default'
							: 'ontario-language-toggler ontario-language-toggler--small',
					'href': this.url ? this.url : '#',
					'hreflang': this.oppositeLanguageLabel?.abbreviation,
					'lang': this.oppositeLanguageLabel?.abbreviation,
					'onClick': (e) => this.handleHeaderLanguageToggled(this.languageState, e),
				},
				this.size === 'small'
					? h('span', null, this.oppositeLanguageLabel?.fullWord)
					: h(
							Fragment,
							null,
							h(
								'abbr',
								{ title: this.oppositeLanguageLabel?.fullWord, class: 'ontario-show-for-small-only' },
								this.oppositeLanguageLabel?.abbreviation.toUpperCase(),
							),
							h('span', { class: 'ontario-show-for-medium' }, this.oppositeLanguageLabel?.fullWord),
						),
			);
		}
		static get watchers() {
			return {
				language: ['updateLanguage'],
			};
		}
		static get style() {
			return ontarioLanguageToggleCss;
		}
	},
	[
		1,
		'ontario-language-toggle',
		{
			language: [1025],
			size: [1],
			url: [1025],
			customLanguageToggle: [16, 'custom-language-toggle'],
			translations: [32],
			languageState: [32],
			oppositeLanguageLabel: [32],
		},
		undefined,
		{
			language: ['updateLanguage'],
		},
	],
);
function defineCustomElement() {
	if (typeof customElements === 'undefined') {
		return;
	}
	const components = ['ontario-language-toggle'];
	components.forEach((tagName) => {
		switch (tagName) {
			case 'ontario-language-toggle':
				if (!customElements.get(tagName)) {
					customElements.define(tagName, OntarioLanguageToggle);
				}
				break;
		}
	});
}

export { OntarioLanguageToggle as O, defineCustomElement as d };
//# sourceMappingURL=p-DDlYnmsc.js.map

//# sourceMappingURL=p-DDlYnmsc.js.map
