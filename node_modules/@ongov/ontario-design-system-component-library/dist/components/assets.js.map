{"file":"assets.js","mappings":";;AAEA;;;;;;;;;;AAUG;AACa,SAAA,oBAAoB,CAAC,SAAiB,EAAE,aAAsB,EAAA;IAC7E,IAAI,aAAa,EAAE;AAClB,QAAA,OAAO,CAAG,EAAA,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA,CAAA,EAAI,SAAS,CAAA,CAAE;;AAG1D,IAAA,IAAI;AACH,QAAA,OAAO,YAAY,CAAC,CAAA,SAAA,EAAY,SAAS,CAAA,CAAE,CAAC;;IAC3C,OAAO,KAAK,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,CAAA,wBAAA,EAA2B,SAAS,CAA6B,2BAAA,CAAA,EAAE,KAAK,CAAC;QACtF,OAAO,CAAA,QAAA,EAAW,SAAS,CAAA,CAAE;;AAE/B;;;;","names":[],"sources":["src/utils/helper/assets.ts"],"sourcesContent":["import { getAssetPath } from '@stencil/core';\n\n/**\n * Generate the full path to an image asset based on the base asset path.\n *\n * - If `assetBasePath` is provided, it is used as the base path.\n * - If not, attempts to use Stencil's `getAssetPath` (for Stencil/Angular builds).\n * - If that fails (e.g., in React), falls back to `/assets/`, assuming assets are in the public folder.\n *\n * @param imageName - The name of the image file.\n * @param assetBasePath - Optional base path for assets.\n * @returns The full image path as a string.\n */\nexport function getImageAssetSrcPath(imageName: string, assetBasePath?: string): string {\n\tif (assetBasePath) {\n\t\treturn `${assetBasePath.replace(/\\/$/, '')}/${imageName}`;\n\t}\n\n\ttry {\n\t\treturn getAssetPath(`./assets/${imageName}`);\n\t} catch (error) {\n\t\tconsole.warn(`getAssetPath failed for ${imageName}, falling back to /assets/:`, error);\n\t\treturn `/assets/${imageName}`;\n\t}\n}\n"],"version":3}