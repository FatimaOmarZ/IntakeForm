import { p as proxyCustomElement, H, c as createEvent, h } from './index.js';
import { a as validatePropExists } from './p-CNqFEifG.js';
import { C as ConsoleMessageClass } from './p-CJXRCL8b.js';
import { d as defineCustomElement$2 } from './p-DyZbYpqr.js';
import { d as defineCustomElement$1 } from './p-pYZtHvSO.js';
import { v as v4 } from './p-BF0_OXTe.js';

const ontarioHintExpanderCss =
	'.ontario-hint-expander__button:focus,.ontario-hint-expander__button:active{box-shadow:0 0 0 4px #009ADB;outline:4px solid transparent;transition:box-shadow 0.1s ease-in-out}.ontario-hint-expander__container{max-width:48rem}.ontario-hint-expander__button{color:#0066CC;cursor:pointer;background:none;border:none;display:flex;align-items:center;font-family:"Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;font-weight:400;font-size:1rem;text-align:left;margin:0 0 1rem 0;padding:0 0.25rem 0 0}.ontario-hint-expander__button-icon--close{display:none;margin-right:0.25rem}.ontario-hint-expander__button-icon--open{display:inline-block;margin-right:0.25rem}.ontario-hint-expander__button:hover{color:#00478F}.ontario-hint-expander__button:active{color:#002142}.ontario-hint-expander__button>*{pointer-events:none}.ontario-hint-expander__content{border-left:4px solid #cccccc;color:#1a1a1a;background-color:#f2f2f2;display:none;padding:1rem 1rem 1rem calc(1rem + 0.25rem);margin:0 0 1rem 0.25rem}.ontario-hint-expander__content *:first-child{margin-top:0}.ontario-hint-expander__content *:last-child{margin-bottom:0}.ontario-hint-expander__content img{width:100%}@media screen and (min-width: 40em){.ontario-hint-expander__content img{width:50%}}.ontario-hint-expander__content.ontario-expander__content--opened{display:block}.ontario-hint-expander__container.ontario-expander--active .ontario-hint-expander__button-icon--close{display:inline-block}.ontario-hint-expander__container.ontario-expander--active .ontario-hint-expander__button-icon--open{display:none}.ontario-hint-expander__checkbox-exists-true{margin:0.75rem 0 0 0.5rem}@media screen and (max-width: 40em){.ontario-hint-expander__checkbox-exists-true{margin-top:1rem}}.ontario-input+.ontario-hint-expander__container{margin-top:-1.5rem !important}.ontario-checkboxes__item .ontario-hint-expander__container,.ontario-radios__item .ontario-hint-expander__container{margin-left:0.5rem}.ontario-checkboxes__label+.ontario-hint-expander__container,.ontario-radios__label+.ontario-hint-expander__container{margin-top:0.75rem}@media screen and (max-width: 40em){.ontario-checkboxes__label+.ontario-hint-expander__container,.ontario-radios__label+.ontario-hint-expander__container{margin-top:1rem}}';

const OntarioHintExpander = /*@__PURE__*/ proxyCustomElement(
	class OntarioHintExpander extends H {
		constructor() {
			super();
			this.__registerHost();
			this.__attachShadow();
			this.toggleExpanderEvent = createEvent(this, 'toggleExpanderEvent');
		}
		get host() {
			return this;
		}
		/**
		 * The content type of the hint.
		 * If no prop is passed, it will default to a string.
		 * If the hint requires multiple lines or HTML, the `hintContentType` prop should be set to `html`.
		 */
		hintContentType = 'string';
		/**
		 * Text to display as the hint expander question/statement
		 */
		hint;
		/**
		 * Content to display as the hint, once the expander is toggled open.
		 * Please note that any content that is passed into this prop will only be displayed as a string.
		 * If you would like to add HTML content, supply child content to the component.
		 *
		 * @example
		 * <ontario-hint-expander hint="This is the hint"
		 *   <img src="https://www.jquery-az.com/html/images/banana.jpg" title="Title of image" alt="alt text here"/>
		 *   <p> Here is the content beside the image </p>
		 * </ontario-hint-expander>
		 */
		content;
		/**
		 * Used to used to establish a relationship between hint text content and elements using aria-describedby. This is optional - if no ID is passed, one will be generated.
		 */
		elementId;
		hintState;
		/**
		 * Emitted when a keyboard input or mouse event occurs.
		 */
		toggleExpanderEvent;
		/**
		 * Watch for changes to the `hintContentType` prop for validation purposes.
		 * If none is provided, or the wrong type is provided, it will default to `string`.
		 */
		checkHintContentType() {
			if (this.hintContentType !== 'string' && this.hintContentType !== 'html') {
				const message = new ConsoleMessageClass();
				message
					.addDesignSystemTag()
					.addMonospaceText(' hintContentType ')
					.addRegularText('for')
					.addMonospaceText(' <ontario-hint-text> ')
					.addRegularText('was not one of the permitted types. A default type of `string` will be applied.')
					.printMessage();
				return (this.hintContentType = 'string');
			}
			return this.hintContentType;
		}
		/*
		 * Watch for changes in the `hint` prop for validation purposes.
		 * If no `hint` prop is provided, the `hint` will be set to the host element textContent (if it exists).
		 */
		updateHintContent() {
			this.hintState = this.hint ?? this.host.textContent ?? '';
			this.validateHint(this.hintState);
		}
		/*
		 * Watch for changes to the `content` prop for validation purposes.
		 *
		 * Validate the `content` and make sure the `content` has a value.
		 * Log a warning if user doesn't input a value for the `content` or element content.
		 */
		validateContent(newValue) {
			if (validatePropExists(newValue)) {
				const message = new ConsoleMessageClass();
				message
					.addDesignSystemTag()
					.addMonospaceText(' content ')
					.addRegularText('for')
					.addMonospaceText(' <ontario-hint-expander> ')
					.addRegularText('was not provided')
					.printMessage();
			}
		}
		onClick = (ev) => {
			const hintExpander = ev.target;
			const hintExpanderParent = hintExpander?.parentElement;
			hintExpanderParent?.classList.toggle('ontario-expander--active');
			let content = hintExpanderParent?.querySelector("[data-toggle='ontario-expander-content']");
			content?.classList.toggle('ontario-expander__content--opened');
			content?.classList.contains('ontario-expander__content--opened')
				? content.setAttribute('aria-hidden', 'false')
				: content?.setAttribute('aria-hidden', 'true');
			hintExpanderParent?.classList.contains('ontario-expander--active')
				? hintExpanderParent?.setAttribute('aria-expanded', 'true')
				: hintExpanderParent?.setAttribute('aria-expanded', 'false');
			this.toggleExpanderEvent.emit(ev);
		};
		/*
		 * Watch for changes in the `hint` prop for validation purposes.
		 *
		 * Validate the `hint` and make sure the `hint` has a value.
		 * Log a warning if user doesn't input a value for the `hint`.
		 */
		validateHint(newValue) {
			if (validatePropExists(newValue)) {
				const message = new ConsoleMessageClass();
				message
					.addDesignSystemTag()
					.addMonospaceText(' hint ')
					.addRegularText('for')
					.addMonospaceText(' <ontario-hint-expander> ')
					.addRegularText('was not provided')
					.printMessage();
			}
		}
		/**
		 * Set `hint` using internal component logic
		 */
		componentWillLoad() {
			this.elementId = this.elementId ?? v4();
			this.updateHintContent();
			this.checkHintContentType();
			this.validateContent(this.content);
		}
		/**
		 * This helper is used to help load translations for any slots + text content passed in by the user.
		 */
		componentDidLoad() {
			const observer = new MutationObserver((mutations) => {
				mutations.forEach((mutation) => {
					if (mutation.type === 'attributes') {
						this.updateHintContent();
					}
				});
			});
			const options = { attributes: true };
			observer.observe(this.host, options);
		}
		getId() {
			return this.elementId ?? '';
		}
		render() {
			return h(
				'div',
				{ key: 'de3d223cc99fe939b37472aeb127046ad1e7cfb4', class: 'ontario-hint-expander__container' },
				h(
					'button',
					{
						'key': '3102d97aa969066c32c20a8967eff971e0134f76',
						'class': 'ontario-hint-expander__button',
						'onClick': this.onClick,
						'id': `hint-expander-button-${this.getId()}`,
						'aria-controls': `hint-expander-content-${this.getId()}`,
						'aria-expanded': 'false',
						'data-toggle': 'ontario-collapse',
					},
					h(
						'span',
						{
							key: 'b8856b64b6f4319ccac743a6f2c9a742648a2b18',
							class: 'ontario-hint-expander__button-icon--close ontario-icon',
						},
						h('ontario-icon-chevron-up', { key: '6aa07816393bc8768e0304b58c66226e7502ca8a', colour: 'inherit' }),
					),
					h(
						'span',
						{ key: '5bfe9d549dfcce83d26ec351856d3cc1c1f4d9c2', class: 'ontario-hint-expander__button-icon--open' },
						h('ontario-icon-chevron-down', { key: '24650b2b0254fe5429cb43195d93f2b3a653b168', colour: 'inherit' }),
					),
					this.hint,
				),
				h(
					'div',
					{
						'key': '7925aa9f5f883ecb0739cdb068b1a1cfe2b40714',
						'class': 'ontario-hint-expander__content',
						'id': `hint-expander-content-${this.getId()}`,
						'aria-labelledby': `hint-expander-button-${this.getId()}`,
						'aria-hidden': 'true',
						'data-toggle': 'ontario-expander-content',
					},
					this.hintContentType === 'string' ? this.content : h('span', { innerHTML: this.content }),
				),
			);
		}
		static get watchers() {
			return {
				hintContentType: ['checkHintContentType'],
				hint: ['updateHintContent'],
				content: ['validateContent'],
			};
		}
		static get style() {
			return ontarioHintExpanderCss;
		}
	},
	[
		1,
		'ontario-hint-expander',
		{
			hintContentType: [1025, 'hint-content-type'],
			hint: [1],
			content: [1025],
			elementId: [1025, 'element-id'],
			hintState: [32],
		},
		undefined,
		{
			hintContentType: ['checkHintContentType'],
			hint: ['updateHintContent'],
			content: ['validateContent'],
		},
	],
);
function defineCustomElement() {
	if (typeof customElements === 'undefined') {
		return;
	}
	const components = ['ontario-hint-expander', 'ontario-icon-chevron-down', 'ontario-icon-chevron-up'];
	components.forEach((tagName) => {
		switch (tagName) {
			case 'ontario-hint-expander':
				if (!customElements.get(tagName)) {
					customElements.define(tagName, OntarioHintExpander);
				}
				break;
			case 'ontario-icon-chevron-down':
				if (!customElements.get(tagName)) {
					defineCustomElement$2();
				}
				break;
			case 'ontario-icon-chevron-up':
				if (!customElements.get(tagName)) {
					defineCustomElement$1();
				}
				break;
		}
	});
}

export { OntarioHintExpander as O, defineCustomElement as d };
//# sourceMappingURL=p-orSa-v1r.js.map

//# sourceMappingURL=p-orSa-v1r.js.map
