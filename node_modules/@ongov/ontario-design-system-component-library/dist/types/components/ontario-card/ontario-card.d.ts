import {
	HeaderColour,
	HorizontalImagePositionType,
	HorizontalImageSizeType,
	LayoutDirection,
} from './ontario-card-types';
import { HeadingLevel } from '../../utils/common/common.interface';
export declare class OntarioCard {
	host: HTMLElement;
	/**
	 * Text to be displayed within the header.
	 *
	 * @example
	 *	<ontario-card
	 *		header-type="dark"
	 *		card-type="horizontal"
	 *		label="Card Title 1"
	 *		description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
	 *	>
	 */
	label: string;
	/**
	 * The heading level that the label will be rendered as.
	 *
	 * @example
	 *	<ontario-card
	 *		heading-level="h4"
	 *		label="Card Title 1"
	 *	>
	 */
	headingLevel: HeadingLevel;
	/**
	 * Image to be displayed within the card image container.
	 *
	 * This is optional.
	 */
	image?: string;
	/**
	 * Alt text for the card's image.
	 *
	 * This is optional prop, but may be required for an
	 * image due to accessibility requirements.
	 *
	 * You can find guidance on when to add alt text to an image
	 * on the Ontario.ca web content editing guide.
	 *
	 * https://www.ontario.ca/page/ontario-ca-web-content-editing-guide#alt-text-image-accessibility
	 *
	 * Note: This should default to an empty string ('') to ensure the alt attribute appears in the markup
	 * for decorative images. If left as undefined, the alt attribute will not render in markup.
	 */
	imageAltText?: string;
	/**
	 * Text to be displayed within the card description container.
	 *
	 * This is optional.
	 */
	description?: string;
	/**
	 * Action link for when the card is clicked.
	 *
	 * This is optional.
	 */
	cardLink?: string;
	/**
	 * The layout direction/orientation of the card.
	 *
	 * If no type is passed, it will default to 'vertical'.
	 *
	 */
	layoutDirection?: LayoutDirection;
	/**
	 * Set the card's header colour.
	 *
	 * This is optional.
	 */
	headerColour?: HeaderColour;
	/**
	 * The position of the image when the card-type is set to 'horizontal'.
	 *
	 * This prop is only necessry when the card-type is set to 'horizontal'.
	 *
	 * @example
	 * 	<ontario-card
	 *		card-type="horizontal"
	 *		label="Card Title 1"
	 *		image="https://picsum.photos/200/300"
	 *		horizontal-image-position-type="left"
	 *		horizontal-image-size-type="one-fourth"
	 *	  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
	 *	>
	 *	</ontario-card>
	 */
	horizontalImagePositionType?: HorizontalImagePositionType;
	/**
	 * The size of the image when the card-type is set to 'horizontal'.
	 *
	 * This prop is only necessry when the card-type is set to 'horizontal'.
	 *
	 * @example
	 * 	<ontario-card
	 *		card-type="horizontal"
	 *		label="Card Title 1"
	 *		image="https://picsum.photos/200/300"
	 *		horizontal-image-position-type="left"
	 *		horizontal-image-size-type="one-fourth"
	 *	  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
	 *	>
	 *	</ontario-card>
	 */
	horizontalImageSizeType?: HorizontalImageSizeType;
	/**
	 * Provides more context as to what the card interaction is doing. This should only be used for accessibility purposes, if the card interaction requires more * * description than what the text provides.
	 *
	 * This is optional.
	 *
	 */
	ariaLabelText?: string;
	private cardState;
	/**
	 * Watch for changes to the `layoutDirection` property for validation purposes.
	 *
	 * If the user input doesn't match one of the array values then `layoutDirection` will be set to its default (`vertical`).
	 * If a match is found in one of the array values then `cardState.layoutDirection` will be set to the matching array key value.
	 */
	validateLayoutDirection(): void;
	/**
	 * Watch for changes to the `headingLevel` property for validation purposes.
	 *
	 * If the user input doesn't match one of the array values then `headingLevel` will be set to its default (`h2`).
	 *
	 * If a match is found in one of the array values then `headingLevel` will be set to the matching array key value.
	 */
	validateHeadingLevel(): void;
	/**
	 * Watch for changes to the `headerColour` property for validation purposes.
	 *
	 * If the user input doesn't match one of the array values then `headerColour` will be kept empty (undefined).
	 * If a match is found in one of the array values then `headerColour` will be set to the matching array key value.
	 */
	validateHeaderColour(): void;
	/**
	 * Print an invalid prop warning message.
	 *
	 * @param {string} propName - Name of the prop
	 * @param {string} component - Component the error is on e.g. <ontario-card>
	 * @param {any} propValue - Value of the prop
	 * @param {readonly any[]} acceptableValues  - readonly array of acceptable prop values
	 * @param {string} defaultValue - Stringified representation of the value that the corresponding State Object value will default to
	 */
	private printPropWarning;
	/**
	 * Update a key within the State Object with a value.
	 *
	 * Note: When state is represented as an object, and values are changed, the entire object needs to be rebuilt.
	 * If only the corresponding object key/value is updated, corresponding render changes may not happen.
	 *
	 * @param {keyof CardState} key - Should match a key found within `CardState`.
	 * @param {any} value - Should match the value type associated to the key within `CardState`.
	 */
	private updateCardState;
	/**
	 * Returns the top level classes of the card.
	 *
	 * @returns {string}
	 */
	private getCardClasses;
	/**
	 * Returns the heading classes of the card.
	 *
	 * @returns {string}
	 */
	private getCardHeadingClasses;
	/**
	 * Returns the url that the card links to.
	 *
	 * @returns {string}
	 */
	private getHref;
	/**
	 * Component life cycle hook.
	 *
	 * https://stenciljs.com/docs/component-lifecycle#connectedcallback
	 */
	componentWillLoad(): void;
	render(): any;
}
