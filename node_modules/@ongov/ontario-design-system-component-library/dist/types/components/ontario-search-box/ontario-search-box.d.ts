import { EventEmitter } from '../../stencil-public-runtime';
import { Language } from '../../utils/common/language-types';
import { Hint } from '../../utils/common/common.interface';
import {
	InputFocusBlurEvent,
	InputInteractionEvent,
	InputInputEvent,
} from '../../utils/events/event-handler.interface';
import { Caption } from '../../utils/common/input-caption/caption.interface';
export declare class OntarioSearchBox {
	element: HTMLElement;
	internals: ElementInternals;
	/**
	 * This Ref is used get a direct reference to the hint text element
	 */
	private hintTextRef?;
	/**
	 * This Ref is used get a direct reference to the search input element
	 */
	private inputFieldRef?;
	/**
	 * The language of the component.
	 * This is used for translations. If none is passed, it will default to English.
	 */
	language?: Language;
	/**
	 * The unique identifier of the search-box component. This is optional - if no ID is passed, one will be generated.
	 */
	elementId?: string;
	/**
	 * The value of the search term.
	 * This is optional.
	 */
	value?: string;
	/**
	 * The text to display as the input label
	 *
	 * @example
	 * <ontario-search-box
	 *   caption='{
	 *			"captionText": "Search directory",
	 *			"captionType": "default"
	 *		}'
	 *		required = "true"
	 * >
	 * </ontario-search-box>
	 */
	caption: Caption | string;
	/**
	 * This is used to determine whether the dropdown list is required or not.
	 * This prop gets passed to the InputCaption utility to display either an optional or required flag in the label.
	 * If no prop is set, it will default to false (optional).
	 */
	required?: boolean;
	/**
	 * This Function to perform a search operation.
	 * This function will be called when the search submit button is triggered.
	 * The value argument is used for as search term to use for the search operation. This parameter is optional.
	 * The performSearch prop can be set dynamically using JavaScript, allowing you to define custom search functionality when the search form is submitted.
	 *
	 * @example
	 * <ontario-search-box
	 *	  id="ontario-search-box"
	 *	  caption='Search directory'
	 * ></ontario-search-box>
	 *
	 * <script>
	 *	window.addEventListener('load', () => {
	 *		const searchBox = document.getElementById('ontario-search-box');
	 *		searchBox.performSearch = async (value) => {
	 * 			console.log('Performing search with value:', value);
	 *		};
	 *	});
	 * </script>
	 */
	performSearch?: (value?: string) => Promise<void>;
	/**
	 * Used to include the ontario-hint-text component for the search-box.
	 * This is optional.
	 */
	hintText?: string | Hint;
	/**
	 * Used to add a custom function to the input onInput event.
	 */
	customOnInput?: (event: globalThis.Event) => void;
	/**
	 * Used to add a custom function to the input onChange event.
	 */
	customOnChange?: (event: globalThis.Event) => void;
	/**
	 * Used to add a custom function to the input onBlur event.
	 */
	customOnBlur?: (event: globalThis.Event) => void;
	/**
	 * Used to add a custom function to the input onFocus event.
	 */
	customOnFocus?: (event: globalThis.Event) => void;
	/**
	 * Emitted when the search is submitted.
	 * Below is an example on how to hook into the event to get the event details.
	 *
	 * @example
	 *	<script>
	 *		document.getElementById('ontario-search-box').addEventListener('searchOnSubmit', (event) => {
	 *	 		const searchValue = event.detail;
	 *			console.log('Search submitted with value:', searchValue);
	 *	  };
	 * 	</script>
	 */
	searchOnSubmit: EventEmitter<string>;
	/**
	 * Emitted when a input  occurs when an input has been changed.
	 */
	inputOnInput: EventEmitter<InputInputEvent>;
	/**
	 * Emitted when a keyboard input or mouse event occurs when an input has been changed.
	 */
	inputOnChange: EventEmitter<InputInteractionEvent>;
	/**
	 * Emitted when a keyboard input event occurs when an input has lost focus.
	 */
	inputOnBlur: EventEmitter<InputFocusBlurEvent>;
	/**
	 * Emitted when a keyboard input event occurs when an input has gained focus.
	 */
	inputOnFocus: EventEmitter<InputFocusBlurEvent>;
	/**
	 * The hint text options are re-assigned to the internalHintText array.
	 */
	private internalHintText;
	/**
	 * Instantiate an InputCaption object for internal logic use
	 */
	private captionState;
	/**
	 * Used for the `aria-describedby` value of the dropdown list. This will match with the id of the hint text.
	 */
	hintTextId: string | null | undefined;
	/**
	 * Watch for changes to the `hintText` prop.
	 *
	 * If a `hintText` prop is passed, the `constructHintTextObject` function will convert it to the correct format, and set the result to the `internalHintText` state.
	 */
	private parseHintText;
	/**
	 * Watch for changes to the `caption` prop.
	 *
	 * The caption will be run through the InputCaption constructor to convert it to the correct format, and set the result to the `captionState` state.
	 * @param newValue: Caption | string
	 */
	private updateCaptionState;
	/**
	 * Watch for changes to the `language` prop to render either the English or French translations
	 */
	updateLanguage(): void;
	/**
	 * If a `hintText` prop is passed, the id generated from it will be set to the internal `hintTextId` state to match with the select `aria-describedBy` attribute.
	 */
	componentDidLoad(): Promise<void>;
	componentWillLoad(): void;
	/**
	 * Function to handle input events and the information pertaining to the input to emit.
	 */
	private handleEvent;
	/**
	 * handleSearch function is called when the search submit button is clicked
	 */
	handleSearch(event: MouseEvent): Promise<void>;
	getId(): string;
	private getValue;
	/**
	 *This function ensures that the focus returns to the search input field when the reset button is clicked.
	 */
	private setFocus;
	/**
	 * when the reset button is clicked this function gets called
	 */
	handleFocus: () => void;
	render(): any;
}
