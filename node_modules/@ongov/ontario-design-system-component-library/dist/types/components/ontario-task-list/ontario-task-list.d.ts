import { Language } from '../../utils/common/language-types';
import { HeadingLevel } from '../../utils/common/common.interface';
export type TaskListHeadingLevel = 'h1' | Exclude<HeadingLevel, 'h6'>;
export declare class OntarioTaskList {
	el: HTMLElement;
	/**
	 * The label prop used for the task list heading.
	 */
	label: string;
	/**
	 * Allows consumers to define the heading level for the task list component.
	 *
	 * Accepts 'h1', 'h2', 'h3' or 'h4'. Default is 'h2'.
	 */
	headingLevel: TaskListHeadingLevel;
	/**
	 * The language of the component.
	 * This is used for translations, and is by default set through event listeners checking for a language property from the header. If none are passed, it will default to English.
	 */
	language?: Language;
	/**
	 * State to track the number of completed tasks.
	 */
	completedTasks: number;
	/**
	 * State to track the total number of tasks.
	 */
	totalTasks: number;
	/**
	 * Class-level constant for task count delay in milliseconds.
	 *
	 * This delay ensures that the `ontario-task` custom elements are fully upgraded and rendered
	 * in the DOM before the `countTasks` method is executed. Without this delay, the component
	 * might attempt to query or count tasks before they are properly initialized, leading to
	 * inaccurate task counts.
	 */
	private static readonly TASK_COUNT_DELAY_MS;
	/**
	 * Watch for changes in `headingLevel` prop to validate its value.
	 */
	validateHeadingLevel(newValue: string): void;
	/**
	 * Counts the total tasks and completed tasks by querying for `ontario-task` elements.
	 */
	countTasks(): void;
	/**
	 * Lifecycle method: before the component loads, validate heading level.
	 */
	componentWillLoad(): Promise<void>;
	/**
	 * Ensure tasks are counted after custom elements are fully upgraded.
	 */
	connectedCallback(): void;
	/**
	 * Use slotchange and MutationObserver to track changes in slot content.
	 */
	componentDidLoad(): void;
	componentDidRender(): void;
	render(): any;
}
