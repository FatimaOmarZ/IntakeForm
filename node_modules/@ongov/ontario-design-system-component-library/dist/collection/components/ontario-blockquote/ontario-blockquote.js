import { h } from '@stencil/core';
import { validatePropExists } from '../../utils/validation/validation-functions';
import { ConsoleMessageClass } from '../../utils/console-message/console-message';
export class OntarioBlockquote {
	host;
	/**
	 * Text to be displayed as the quote.
	 *
	 * Note that wrapping the quotes in quotations is not needed - this is handled through the component styles
	 */
	quote;
	/**
	 * Optional text to be displayed as the attribution (the author) of the quote.
	 */
	attribution;
	/**
	 * Optional text to be displayed for additional information about the attribution/author.
	 */
	byline;
	shortQuoteLength = 140;
	shortQuote = false;
	quoteState;
	/*
	 * Watch for changes in the `quote` prop for validation purposes.
	 *
	 * If the `quote` prop is not provided, set the `quote` prop to the host textContent (if it exists).
	 * If the `quote` prop length is 140 characters or less, set the `shortQuote` state to true - this will add additonal classes for the blockquote styles.
	 */
	validateQuote() {
		this.quoteState = this.quote ?? this.host.textContent ?? '';
		this.validateQuoteContent(this.quoteState);
		this.shortQuote = this.quoteState?.length <= this.shortQuoteLength ?? true;
	}
	/**
	 * Print the missing `quote` prop warning message
	 */
	validateQuoteContent(newValue) {
		if (validatePropExists(newValue)) {
			const message = new ConsoleMessageClass();
			message
				.addDesignSystemTag()
				.addMonospaceText(' quote ')
				.addRegularText('for')
				.addMonospaceText(' <ontario-blockquote> ')
				.addRegularText('was not provided')
				.printMessage();
		}
	}
	componentWillLoad() {
		this.validateQuote();
	}
	/**
	 * This helper is used to help load translations for any slots + text content passed in by the user.
	 */
	componentDidLoad() {
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.type === 'attributes') {
					this.validateQuote();
				}
			});
		});
		const options = { attributes: true };
		observer.observe(this.host, options);
	}
	render() {
		return h(
			'blockquote',
			{
				key: '2ee572aa7d71ef844a7bb1fa544962339b19b5d0',
				class: this.shortQuote ? `ontario-blockquote ontario-blockquote--short` : `ontario-blockquote`,
			},
			h('p', { key: 'edda8b3587f2eab9c8e06ee3fbc4162e980cc4a2' }, this.quoteState),
			this.attribution &&
				h(
					'cite',
					{ key: '968f3739eae9fa5d5ae4a88462b8b23bc911e5c1', class: 'ontario-blockquote__attribution' },
					this.attribution,
				),
			this.byline &&
				h(
					'cite',
					{ key: 'd6a8cd59764e78c64d0163f6a30f18ec215e32e9', class: 'ontario-blockquote__byline' },
					this.byline,
				),
		);
	}
	static get is() {
		return 'ontario-blockquote';
	}
	static get encapsulation() {
		return 'shadow';
	}
	static get originalStyleUrls() {
		return {
			$: ['ontario-blockquote.scss'],
		};
	}
	static get styleUrls() {
		return {
			$: ['ontario-blockquote.css'],
		};
	}
	static get properties() {
		return {
			quote: {
				type: 'string',
				attribute: 'quote',
				mutable: true,
				complexType: {
					original: 'string',
					resolved: 'string',
					references: {},
				},
				required: false,
				optional: false,
				docs: {
					tags: [],
					text: 'Text to be displayed as the quote.\n\nNote that wrapping the quotes in quotations is not needed - this is handled through the component styles',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			attribution: {
				type: 'string',
				attribute: 'attribution',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Optional text to be displayed as the attribution (the author) of the quote.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			byline: {
				type: 'string',
				attribute: 'byline',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Optional text to be displayed for additional information about the attribution/author.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
		};
	}
	static get states() {
		return {
			shortQuoteLength: {},
			shortQuote: {},
			quoteState: {},
		};
	}
	static get elementRef() {
		return 'host';
	}
	static get watchers() {
		return [
			{
				propName: 'quote',
				methodName: 'validateQuote',
			},
		];
	}
}
//# sourceMappingURL=ontario-blockquote.js.map
