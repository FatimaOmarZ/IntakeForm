{"version":3,"file":"ontario-card.js","sourceRoot":"","sources":["../../../src/components/ontario-card/ontario-card.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAC1E,OAAO,EACN,uBAAuB,EAIvB,0BAA0B,GAG1B,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,uBAAuB,EAAgB,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAE,mBAAmB,EAAE,MAAM,6CAA6C,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,yBAAyB,EAAE,MAAM,6CAA6C,CAAC;AAOxF,MAAM,OAAO,WAAW;IACZ,IAAI,CAAc;IAE7B;;;;;;;;;;OAUG;IACK,KAAK,CAAS;IAEtB;;;;;;;;OAQG;IACK,YAAY,GAAiB,IAAI,CAAC;IAE1C;;;;OAIG;IACK,KAAK,CAAU;IAEvB;;;;;;;;;;;;;OAaG;IACK,YAAY,GAAY,EAAE,CAAC;IAEnC;;;;OAIG;IACK,WAAW,CAAU;IAE7B;;;;OAIG;IACK,QAAQ,CAAU;IAE1B;;;;;OAKG;IACK,eAAe,GAAqB,UAAU,CAAC;IAEvD;;;;OAIG;IACK,YAAY,CAAgB;IAEpC;;;;;;;;;;;;;;;OAeG;IACK,2BAA2B,GAAiC,MAAM,CAAC;IAE3E;;;;;;;;;;;;;;;OAeG;IACK,uBAAuB,GAA6B,WAAW,CAAC;IAExE;;;;;OAKG;IACK,aAAa,CAAU;IAEd,SAAS,GAAc;QACvC,YAAY,EAAE,SAAS;QACvB,YAAY,EAAE,SAAS;QACvB,eAAe,EAAE,SAAS;KAC1B,CAAC;IAEF;;;;;OAKG;IAEH,uBAAuB;QACtB,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,IAAI,yBAAyB,CAAC,IAAI,CAAC,eAAe,EAAE,0BAA0B,CAAC,CAAC;QAEpH,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,IAAI,CAAC,gBAAgB,CACpB,kBAAkB,EAClB,gBAAgB,EAChB,IAAI,CAAC,eAAe,EACpB,0BAA0B,EAC1B,UAAU,CACV,CAAC;YACF,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC;YACpD,OAAO;QACR,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IAEH,oBAAoB;QACnB,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,yBAAyB,CAAC,IAAI,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;QAE3G,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,gBAAgB,EAAE,IAAI,CAAC,YAAY,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAAC;YAC3G,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YAC3C,OAAO;QACR,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IAEH,oBAAoB;QACnB,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,yBAAyB,CAAC,IAAI,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;QAE3G,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE,CAAC;YACjD,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,gBAAgB,EAAE,IAAI,CAAC,YAAY,EAAE,uBAAuB,EAAE,WAAW,CAAC,CAAC;YAClH,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YAChD,OAAO;QACR,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;OAQG;IACK,gBAAgB,CACvB,QAAgB,EAChB,SAAiB,EACjB,SAAc,EACd,gBAAgC,EAChC,YAAoB;QAEpB,MAAM,OAAO,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC1C,OAAO;aACL,kBAAkB,EAAE;aACpB,gBAAgB,CAAC,IAAI,QAAQ,GAAG,CAAC;aACjC,cAAc,CAAC,IAAI,CAAC;aACpB,gBAAgB,CAAC,IAAI,SAAS,GAAG,CAAC;aAClC,cAAc,CAAC,iCAAiC,CAAC;aACjD,gBAAgB,CAAC,IAAI,SAAS,GAAG,CAAC;aAClC,cAAc,CAAC,SAAS,CAAC;aACzB,gBAAgB,CAAC,UAAU,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;aACnD,cAAc,CAAC,6CAA6C,CAAC;aAC7D,gBAAgB,CAAC,IAAI,YAAY,GAAG,CAAC;aACrC,cAAc,CAAC,aAAa,CAAC;aAC7B,YAAY,EAAE,CAAC;IAClB,CAAC;IAED;;;;;;;;OAQG;IACK,eAAe,CAAC,GAAoB,EAAE,KAAU;QACvD,MAAM,aAAa,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC5C,aAAa,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACK,cAAc;QACrB,MAAM,SAAS,GACd,IAAI,CAAC,SAAS,CAAC,eAAe,KAAK,YAAY;YAC9C,CAAC,CAAC,yCAAyC,IAAI,CAAC,SAAS,CAAC,eAAe,wBAAwB,IAAI,CAAC,2BAA2B,6BAA6B,IAAI,CAAC,uBAAuB,EAAE;YAC5L,CAAC,CAAC,sEAAsE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC;QAE3G,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kCAAkC,CAAC;QAEpF,MAAM,eAAe,GACpB,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,6BAA6B,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAEhG,OAAO,GAAG,SAAS,IAAI,gBAAgB,IAAI,eAAe,EAAE,CAAC,IAAI,EAAE,CAAC;IACrE,CAAC;IAED;;;;OAIG;IACK,qBAAqB;QAC5B,MAAM,SAAS,GAAG,uBAAuB,CAAC;QAE1C,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,0BAA0B,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAEnH,OAAO,GAAG,SAAS,IAAI,eAAe,EAAE,CAAC,IAAI,EAAE,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACK,OAAO;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACH,iBAAiB;QAChB,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM;QACL,OAAO,CACN,2DAAI,KAAK,EAAE,IAAI,CAAC,cAAc,EAAE;YAC9B,IAAI,CAAC,KAAK,IAAI,CACd,4DAAK,KAAK,EAAC,+BAA+B;gBACzC,0DAAG,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,gBAAc,IAAI,CAAC,aAAa;oBACtD,4DAAK,KAAK,EAAC,qBAAqB,EAAC,GAAG,EAAE,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,GAAI,CACzE,CACC,CACN;YACD,4DAAK,KAAK,EAAE,gCAAgC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE,EAAE;gBASxF,CAAC,CACD,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK;gBAClC,EAAE,SAAS,EAAE,IAAI,CAAC,qBAAqB,EAAE,EAAE,EAAE,YAAY;gBACzD,SAAG,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,gBAAc,IAAI,CAAC,aAAa,IACrD,IAAI,CAAC,KAAK,CACR,CACJ;gBACA,IAAI,CAAC,WAAW,IAAI,CACpB,4DAAK,KAAK,EAAC,2BAA2B;oBACrC,4DAAI,IAAI,CAAC,WAAW,CAAK,CACpB,CACN,CACI,CACF,CACL,CAAC;IACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACD","sourcesContent":["import { Component, Prop, Element, h, State, Watch } from '@stencil/core';\nimport {\n\theaderColourDefinitions,\n\tHeaderColour,\n\tHorizontalImagePositionType,\n\tHorizontalImageSizeType,\n\tlayoutDirectionDefinitions,\n\tLayoutDirection,\n\tCardState,\n} from './ontario-card-types';\nimport { headingLevelDefinitions, HeadingLevel } from '../../utils/common/common.interface';\nimport { ConsoleMessageClass } from '../../utils/console-message/console-message';\nimport { printArray } from '../../utils/helper/utils';\nimport { validateValueAgainstArray } from '../../utils/validation/validation-functions';\n\n@Component({\n\ttag: 'ontario-card',\n\tstyleUrl: 'ontario-card.scss',\n\tshadow: true,\n})\nexport class OntarioCard {\n\t@Element() host: HTMLElement;\n\n\t/**\n\t * Text to be displayed within the header.\n\t *\n\t * @example\n\t *\t<ontario-card\n\t *\t\theader-type=\"dark\"\n\t *\t\tcard-type=\"horizontal\"\n\t *\t\tlabel=\"Card Title 1\"\n\t *\t\tdescription=\"Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum\"\n\t *\t>\n\t */\n\t@Prop() label: string;\n\n\t/**\n\t * The heading level that the label will be rendered as.\n\t *\n\t * @example\n\t *\t<ontario-card\n\t *\t\theading-level=\"h4\"\n\t *\t\tlabel=\"Card Title 1\"\n\t *\t>\n\t */\n\t@Prop() headingLevel: HeadingLevel = 'h2';\n\n\t/**\n\t * Image to be displayed within the card image container.\n\t *\n\t * This is optional.\n\t */\n\t@Prop() image?: string;\n\n\t/**\n\t * Alt text for the card's image.\n\t *\n\t * This is optional prop, but may be required for an\n\t * image due to accessibility requirements.\n\t *\n\t * You can find guidance on when to add alt text to an image\n\t * on the Ontario.ca web content editing guide.\n\t *\n\t * https://www.ontario.ca/page/ontario-ca-web-content-editing-guide#alt-text-image-accessibility\n\t *\n\t * Note: This should default to an empty string ('') to ensure the alt attribute appears in the markup\n\t * for decorative images. If left as undefined, the alt attribute will not render in markup.\n\t */\n\t@Prop() imageAltText?: string = '';\n\n\t/**\n\t * Text to be displayed within the card description container.\n\t *\n\t * This is optional.\n\t */\n\t@Prop() description?: string;\n\n\t/**\n\t * Action link for when the card is clicked.\n\t *\n\t * This is optional.\n\t */\n\t@Prop() cardLink?: string;\n\n\t/**\n\t * The layout direction/orientation of the card.\n\t *\n\t * If no type is passed, it will default to 'vertical'.\n\t *\n\t */\n\t@Prop() layoutDirection?: LayoutDirection = 'vertical';\n\n\t/**\n\t * Set the card's header colour.\n\t *\n\t * This is optional.\n\t */\n\t@Prop() headerColour?: HeaderColour;\n\n\t/**\n\t * The position of the image when the card-type is set to 'horizontal'.\n\t *\n\t * This prop is only necessry when the card-type is set to 'horizontal'.\n\t *\n\t * @example\n\t * \t<ontario-card\n\t *\t\tcard-type=\"horizontal\"\n\t *\t\tlabel=\"Card Title 1\"\n\t *\t\timage=\"https://picsum.photos/200/300\"\n\t *\t\thorizontal-image-position-type=\"left\"\n\t *\t\thorizontal-image-size-type=\"one-fourth\"\n\t *\t  description=\"Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum\"\n\t *\t>\n\t *\t</ontario-card>\n\t */\n\t@Prop() horizontalImagePositionType?: HorizontalImagePositionType = 'left';\n\n\t/**\n\t * The size of the image when the card-type is set to 'horizontal'.\n\t *\n\t * This prop is only necessry when the card-type is set to 'horizontal'.\n\t *\n\t * @example\n\t * \t<ontario-card\n\t *\t\tcard-type=\"horizontal\"\n\t *\t\tlabel=\"Card Title 1\"\n\t *\t\timage=\"https://picsum.photos/200/300\"\n\t *\t\thorizontal-image-position-type=\"left\"\n\t *\t\thorizontal-image-size-type=\"one-fourth\"\n\t *\t  description=\"Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum\"\n\t *\t>\n\t *\t</ontario-card>\n\t */\n\t@Prop() horizontalImageSizeType?: HorizontalImageSizeType = 'one-third';\n\n\t/**\n\t * Provides more context as to what the card interaction is doing. This should only be used for accessibility purposes, if the card interaction requires more * * description than what the text provides.\n\t *\n\t * This is optional.\n\t *\n\t */\n\t@Prop() ariaLabelText?: string;\n\n\t@State() private cardState: CardState = {\n\t\theaderColour: undefined,\n\t\theadingLevel: undefined,\n\t\tlayoutDirection: undefined,\n\t};\n\n\t/**\n\t * Watch for changes to the `layoutDirection` property for validation purposes.\n\t *\n\t * If the user input doesn't match one of the array values then `layoutDirection` will be set to its default (`vertical`).\n\t * If a match is found in one of the array values then `cardState.layoutDirection` will be set to the matching array key value.\n\t */\n\t@Watch('layoutDirection')\n\tvalidateLayoutDirection() {\n\t\tconst isValid = this.layoutDirection && validateValueAgainstArray(this.layoutDirection, layoutDirectionDefinitions);\n\n\t\tif (!isValid) {\n\t\t\tthis.printPropWarning(\n\t\t\t\t'layout-direction',\n\t\t\t\t'<ontario-card>',\n\t\t\t\tthis.layoutDirection,\n\t\t\t\tlayoutDirectionDefinitions,\n\t\t\t\t'vertical',\n\t\t\t);\n\t\t\tthis.updateCardState('layoutDirection', 'vertical');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updateCardState('layoutDirection', this.layoutDirection);\n\t}\n\n\t/**\n\t * Watch for changes to the `headingLevel` property for validation purposes.\n\t *\n\t * If the user input doesn't match one of the array values then `headingLevel` will be set to its default (`h2`).\n\t *\n\t * If a match is found in one of the array values then `headingLevel` will be set to the matching array key value.\n\t */\n\t@Watch('headingLevel')\n\tvalidateHeadingLevel() {\n\t\tconst isValid = this.headingLevel && validateValueAgainstArray(this.headingLevel, headingLevelDefinitions);\n\n\t\tif (!isValid) {\n\t\t\tthis.printPropWarning('heading-level', '<ontario-card>', this.headingLevel, headingLevelDefinitions, 'h2');\n\t\t\tthis.updateCardState('headingLevel', 'h2');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updateCardState('headingLevel', this.headingLevel);\n\t}\n\n\t/**\n\t * Watch for changes to the `headerColour` property for validation purposes.\n\t *\n\t * If the user input doesn't match one of the array values then `headerColour` will be kept empty (undefined).\n\t * If a match is found in one of the array values then `headerColour` will be set to the matching array key value.\n\t */\n\t@Watch('headerColour')\n\tvalidateHeaderColour() {\n\t\tconst isValid = this.headerColour && validateValueAgainstArray(this.headerColour, headerColourDefinitions);\n\n\t\tif (!isValid && this.headerColour !== undefined) {\n\t\t\tthis.printPropWarning('header-colour', '<ontario-card>', this.headerColour, headerColourDefinitions, 'undefined');\n\t\t\tthis.updateCardState('headerColour', undefined);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updateCardState('headerColour', this.headerColour);\n\t}\n\n\t/**\n\t * Print an invalid prop warning message.\n\t *\n\t * @param {string} propName - Name of the prop\n\t * @param {string} component - Component the error is on e.g. <ontario-card>\n\t * @param {any} propValue - Value of the prop\n\t * @param {readonly any[]} acceptableValues  - readonly array of acceptable prop values\n\t * @param {string} defaultValue - Stringified representation of the value that the corresponding State Object value will default to\n\t */\n\tprivate printPropWarning(\n\t\tpropName: string,\n\t\tcomponent: string,\n\t\tpropValue: any,\n\t\tacceptableValues: readonly any[],\n\t\tdefaultValue: string,\n\t) {\n\t\tconst message = new ConsoleMessageClass();\n\t\tmessage\n\t\t\t.addDesignSystemTag()\n\t\t\t.addMonospaceText(` ${propName} `)\n\t\t\t.addRegularText('on')\n\t\t\t.addMonospaceText(` ${component} `)\n\t\t\t.addRegularText('was set to an invalid value of ')\n\t\t\t.addMonospaceText(` ${propValue} `)\n\t\t\t.addRegularText('. Only ')\n\t\t\t.addMonospaceText(printArray([...acceptableValues]))\n\t\t\t.addRegularText(' are supported values. The default value of')\n\t\t\t.addMonospaceText(` ${defaultValue} `)\n\t\t\t.addRegularText('is assumed.')\n\t\t\t.printMessage();\n\t}\n\n\t/**\n\t * Update a key within the State Object with a value.\n\t *\n\t * Note: When state is represented as an object, and values are changed, the entire object needs to be rebuilt.\n\t * If only the corresponding object key/value is updated, corresponding render changes may not happen.\n\t *\n\t * @param {keyof CardState} key - Should match a key found within `CardState`.\n\t * @param {any} value - Should match the value type associated to the key within `CardState`.\n\t */\n\tprivate updateCardState(key: keyof CardState, value: any) {\n\t\tconst cardStateCopy = { ...this.cardState };\n\t\tcardStateCopy[key] = value;\n\t\tthis.cardState = cardStateCopy;\n\t}\n\n\t/**\n\t * Returns the top level classes of the card.\n\t *\n\t * @returns {string}\n\t */\n\tprivate getCardClasses(): string {\n\t\tconst baseClass =\n\t\t\tthis.cardState.layoutDirection === 'horizontal'\n\t\t\t\t? `ontario-card ontario-card__card-type--${this.cardState.layoutDirection} ontario-card__image-${this.horizontalImagePositionType} ontario-card__image-size-${this.horizontalImageSizeType}`\n\t\t\t\t: `ontario-card ontario-card__card-type--basic ontario-card--position-${this.cardState.layoutDirection}`;\n\n\t\tconst descriptionClass = this.description ? '' : ' ontario-card__description-false';\n\n\t\tconst backgroundClass =\n\t\t\tthis.headerColour && !this.description ? `ontario-card__background--${this.headerColour}` : '';\n\n\t\treturn `${baseClass} ${descriptionClass} ${backgroundClass}`.trim();\n\t}\n\n\t/**\n\t * Returns the heading classes of the card.\n\t *\n\t * @returns {string}\n\t */\n\tprivate getCardHeadingClasses(): string {\n\t\tconst baseClass = 'ontario-card__heading';\n\n\t\tconst backgroundClass = this.cardState.headerColour ? `ontario-card__heading--${this.cardState.headerColour}` : '';\n\n\t\treturn `${baseClass} ${backgroundClass}`.trim();\n\t}\n\n\t/**\n\t * Returns the url that the card links to.\n\t *\n\t * @returns {string}\n\t */\n\tprivate getHref(): string {\n\t\treturn this.cardLink ? this.cardLink : '#';\n\t}\n\n\t/**\n\t * Component life cycle hook.\n\t *\n\t * https://stenciljs.com/docs/component-lifecycle#connectedcallback\n\t */\n\tcomponentWillLoad() {\n\t\tthis.validateLayoutDirection();\n\t\tthis.validateHeadingLevel();\n\t\tthis.validateHeaderColour();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<li class={this.getCardClasses()}>\n\t\t\t\t{this.image && (\n\t\t\t\t\t<div class=\"ontario-card__image-container\">\n\t\t\t\t\t\t<a href={this.getHref()} aria-label={this.ariaLabelText}>\n\t\t\t\t\t\t\t<img class=\"ontario-card__image\" alt={this.imageAltText} src={this.image} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div class={`ontario-card__text-container ${this.image ? 'ontario-card--image-true' : ''}`}>\n\t\t\t\t\t{/**\n\t\t\t\t\t * h() is a stencil wrapped shorthand method for a render function, and is very\n\t\t\t\t\t * similar to the h() method or createElement() method found within React\n\t\t\t\t\t * It accepts 3 parameters:\n\t\t\t\t\t *  - a string interpretation of an HTML tag (e.g. 'h2')\n\t\t\t\t\t *  - an object of properties / attributes (e.g. 'id', 'className')\n\t\t\t\t\t *  - The innerHTML such as a string, or additional HTML elements\n\t\t\t\t\t */}\n\t\t\t\t\t{h(\n\t\t\t\t\t\tthis.cardState.headingLevel, //tag\n\t\t\t\t\t\t{ className: this.getCardHeadingClasses() }, //attributes\n\t\t\t\t\t\t<a href={this.getHref()} aria-label={this.ariaLabelText}>\n\t\t\t\t\t\t\t{this.label}\n\t\t\t\t\t\t</a>,\n\t\t\t\t\t)}\n\t\t\t\t\t{this.description && (\n\t\t\t\t\t\t<div class=\"ontario-card__description\">\n\t\t\t\t\t\t\t<p>{this.description}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t);\n\t}\n}\n"]}