import { h } from '@stencil/core';
import { headerColourDefinitions, layoutDirectionDefinitions } from './ontario-card-types';
import { headingLevelDefinitions } from '../../utils/common/common.interface';
import { ConsoleMessageClass } from '../../utils/console-message/console-message';
import { printArray } from '../../utils/helper/utils';
import { validateValueAgainstArray } from '../../utils/validation/validation-functions';
export class OntarioCard {
	host;
	/**
	 * Text to be displayed within the header.
	 *
	 * @example
	 *	<ontario-card
	 *		header-type="dark"
	 *		card-type="horizontal"
	 *		label="Card Title 1"
	 *		description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
	 *	>
	 */
	label;
	/**
	 * The heading level that the label will be rendered as.
	 *
	 * @example
	 *	<ontario-card
	 *		heading-level="h4"
	 *		label="Card Title 1"
	 *	>
	 */
	headingLevel = 'h2';
	/**
	 * Image to be displayed within the card image container.
	 *
	 * This is optional.
	 */
	image;
	/**
	 * Alt text for the card's image.
	 *
	 * This is optional prop, but may be required for an
	 * image due to accessibility requirements.
	 *
	 * You can find guidance on when to add alt text to an image
	 * on the Ontario.ca web content editing guide.
	 *
	 * https://www.ontario.ca/page/ontario-ca-web-content-editing-guide#alt-text-image-accessibility
	 *
	 * Note: This should default to an empty string ('') to ensure the alt attribute appears in the markup
	 * for decorative images. If left as undefined, the alt attribute will not render in markup.
	 */
	imageAltText = '';
	/**
	 * Text to be displayed within the card description container.
	 *
	 * This is optional.
	 */
	description;
	/**
	 * Action link for when the card is clicked.
	 *
	 * This is optional.
	 */
	cardLink;
	/**
	 * The layout direction/orientation of the card.
	 *
	 * If no type is passed, it will default to 'vertical'.
	 *
	 */
	layoutDirection = 'vertical';
	/**
	 * Set the card's header colour.
	 *
	 * This is optional.
	 */
	headerColour;
	/**
	 * The position of the image when the card-type is set to 'horizontal'.
	 *
	 * This prop is only necessry when the card-type is set to 'horizontal'.
	 *
	 * @example
	 * 	<ontario-card
	 *		card-type="horizontal"
	 *		label="Card Title 1"
	 *		image="https://picsum.photos/200/300"
	 *		horizontal-image-position-type="left"
	 *		horizontal-image-size-type="one-fourth"
	 *	  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
	 *	>
	 *	</ontario-card>
	 */
	horizontalImagePositionType = 'left';
	/**
	 * The size of the image when the card-type is set to 'horizontal'.
	 *
	 * This prop is only necessry when the card-type is set to 'horizontal'.
	 *
	 * @example
	 * 	<ontario-card
	 *		card-type="horizontal"
	 *		label="Card Title 1"
	 *		image="https://picsum.photos/200/300"
	 *		horizontal-image-position-type="left"
	 *		horizontal-image-size-type="one-fourth"
	 *	  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"
	 *	>
	 *	</ontario-card>
	 */
	horizontalImageSizeType = 'one-third';
	/**
	 * Provides more context as to what the card interaction is doing. This should only be used for accessibility purposes, if the card interaction requires more * * description than what the text provides.
	 *
	 * This is optional.
	 *
	 */
	ariaLabelText;
	cardState = {
		headerColour: undefined,
		headingLevel: undefined,
		layoutDirection: undefined,
	};
	/**
	 * Watch for changes to the `layoutDirection` property for validation purposes.
	 *
	 * If the user input doesn't match one of the array values then `layoutDirection` will be set to its default (`vertical`).
	 * If a match is found in one of the array values then `cardState.layoutDirection` will be set to the matching array key value.
	 */
	validateLayoutDirection() {
		const isValid = this.layoutDirection && validateValueAgainstArray(this.layoutDirection, layoutDirectionDefinitions);
		if (!isValid) {
			this.printPropWarning(
				'layout-direction',
				'<ontario-card>',
				this.layoutDirection,
				layoutDirectionDefinitions,
				'vertical',
			);
			this.updateCardState('layoutDirection', 'vertical');
			return;
		}
		this.updateCardState('layoutDirection', this.layoutDirection);
	}
	/**
	 * Watch for changes to the `headingLevel` property for validation purposes.
	 *
	 * If the user input doesn't match one of the array values then `headingLevel` will be set to its default (`h2`).
	 *
	 * If a match is found in one of the array values then `headingLevel` will be set to the matching array key value.
	 */
	validateHeadingLevel() {
		const isValid = this.headingLevel && validateValueAgainstArray(this.headingLevel, headingLevelDefinitions);
		if (!isValid) {
			this.printPropWarning('heading-level', '<ontario-card>', this.headingLevel, headingLevelDefinitions, 'h2');
			this.updateCardState('headingLevel', 'h2');
			return;
		}
		this.updateCardState('headingLevel', this.headingLevel);
	}
	/**
	 * Watch for changes to the `headerColour` property for validation purposes.
	 *
	 * If the user input doesn't match one of the array values then `headerColour` will be kept empty (undefined).
	 * If a match is found in one of the array values then `headerColour` will be set to the matching array key value.
	 */
	validateHeaderColour() {
		const isValid = this.headerColour && validateValueAgainstArray(this.headerColour, headerColourDefinitions);
		if (!isValid && this.headerColour !== undefined) {
			this.printPropWarning('header-colour', '<ontario-card>', this.headerColour, headerColourDefinitions, 'undefined');
			this.updateCardState('headerColour', undefined);
			return;
		}
		this.updateCardState('headerColour', this.headerColour);
	}
	/**
	 * Print an invalid prop warning message.
	 *
	 * @param {string} propName - Name of the prop
	 * @param {string} component - Component the error is on e.g. <ontario-card>
	 * @param {any} propValue - Value of the prop
	 * @param {readonly any[]} acceptableValues  - readonly array of acceptable prop values
	 * @param {string} defaultValue - Stringified representation of the value that the corresponding State Object value will default to
	 */
	printPropWarning(propName, component, propValue, acceptableValues, defaultValue) {
		const message = new ConsoleMessageClass();
		message
			.addDesignSystemTag()
			.addMonospaceText(` ${propName} `)
			.addRegularText('on')
			.addMonospaceText(` ${component} `)
			.addRegularText('was set to an invalid value of ')
			.addMonospaceText(` ${propValue} `)
			.addRegularText('. Only ')
			.addMonospaceText(printArray([...acceptableValues]))
			.addRegularText(' are supported values. The default value of')
			.addMonospaceText(` ${defaultValue} `)
			.addRegularText('is assumed.')
			.printMessage();
	}
	/**
	 * Update a key within the State Object with a value.
	 *
	 * Note: When state is represented as an object, and values are changed, the entire object needs to be rebuilt.
	 * If only the corresponding object key/value is updated, corresponding render changes may not happen.
	 *
	 * @param {keyof CardState} key - Should match a key found within `CardState`.
	 * @param {any} value - Should match the value type associated to the key within `CardState`.
	 */
	updateCardState(key, value) {
		const cardStateCopy = { ...this.cardState };
		cardStateCopy[key] = value;
		this.cardState = cardStateCopy;
	}
	/**
	 * Returns the top level classes of the card.
	 *
	 * @returns {string}
	 */
	getCardClasses() {
		const baseClass =
			this.cardState.layoutDirection === 'horizontal'
				? `ontario-card ontario-card__card-type--${this.cardState.layoutDirection} ontario-card__image-${this.horizontalImagePositionType} ontario-card__image-size-${this.horizontalImageSizeType}`
				: `ontario-card ontario-card__card-type--basic ontario-card--position-${this.cardState.layoutDirection}`;
		const descriptionClass = this.description ? '' : ' ontario-card__description-false';
		const backgroundClass =
			this.headerColour && !this.description ? `ontario-card__background--${this.headerColour}` : '';
		return `${baseClass} ${descriptionClass} ${backgroundClass}`.trim();
	}
	/**
	 * Returns the heading classes of the card.
	 *
	 * @returns {string}
	 */
	getCardHeadingClasses() {
		const baseClass = 'ontario-card__heading';
		const backgroundClass = this.cardState.headerColour ? `ontario-card__heading--${this.cardState.headerColour}` : '';
		return `${baseClass} ${backgroundClass}`.trim();
	}
	/**
	 * Returns the url that the card links to.
	 *
	 * @returns {string}
	 */
	getHref() {
		return this.cardLink ? this.cardLink : '#';
	}
	/**
	 * Component life cycle hook.
	 *
	 * https://stenciljs.com/docs/component-lifecycle#connectedcallback
	 */
	componentWillLoad() {
		this.validateLayoutDirection();
		this.validateHeadingLevel();
		this.validateHeaderColour();
	}
	render() {
		return h(
			'li',
			{ key: '2491546d5c8cd802237264110f6af2635c9fd2f3', class: this.getCardClasses() },
			this.image &&
				h(
					'div',
					{ key: 'e2c66a5844d5dc92422bb40e7df02dec8951c574', class: 'ontario-card__image-container' },
					h(
						'a',
						{
							'key': '14146da6cc4600e8ab54bd246e0655d3828cdae0',
							'href': this.getHref(),
							'aria-label': this.ariaLabelText,
						},
						h('img', {
							key: '7b80dc691d2a323b5d0078c9c7ef93e96b073367',
							class: 'ontario-card__image',
							alt: this.imageAltText,
							src: this.image,
						}),
					),
				),
			h(
				'div',
				{
					key: '78dd72f3673fc4528660fc24361df6509ed8e4b9',
					class: `ontario-card__text-container ${this.image ? 'ontario-card--image-true' : ''}`,
				},
				h(
					this.cardState.headingLevel, //tag
					{ className: this.getCardHeadingClasses() }, //attributes
					h('a', { 'href': this.getHref(), 'aria-label': this.ariaLabelText }, this.label),
				),
				this.description &&
					h(
						'div',
						{ key: 'f7dad07c4e39806379e3cdbd63d4edcc913859f9', class: 'ontario-card__description' },
						h('p', { key: 'ae429b791a870a174ad39610fd12d426fdb382cd' }, this.description),
					),
			),
		);
	}
	static get is() {
		return 'ontario-card';
	}
	static get encapsulation() {
		return 'shadow';
	}
	static get originalStyleUrls() {
		return {
			$: ['ontario-card.scss'],
		};
	}
	static get styleUrls() {
		return {
			$: ['ontario-card.css'],
		};
	}
	static get properties() {
		return {
			label: {
				type: 'string',
				attribute: 'label',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string',
					references: {},
				},
				required: false,
				optional: false,
				docs: {
					tags: [
						{
							name: 'example',
							text: '<ontario-card\n\theader-type="dark"\n\tcard-type="horizontal"\n\tlabel="Card Title 1"\n\tdescription="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"\n>',
						},
					],
					text: 'Text to be displayed within the header.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			headingLevel: {
				type: 'string',
				attribute: 'heading-level',
				mutable: false,
				complexType: {
					original: 'HeadingLevel',
					resolved: '"h2" | "h3" | "h4" | "h5" | "h6"',
					references: {
						HeadingLevel: {
							location: 'import',
							path: '../../utils/common/common.interface',
							id: 'src/utils/common/common.interface.ts::HeadingLevel',
						},
					},
				},
				required: false,
				optional: false,
				docs: {
					tags: [
						{
							name: 'example',
							text: '<ontario-card\n\theading-level="h4"\n\tlabel="Card Title 1"\n>',
						},
					],
					text: 'The heading level that the label will be rendered as.',
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'h2'",
			},
			image: {
				type: 'string',
				attribute: 'image',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Image to be displayed within the card image container.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			imageAltText: {
				type: 'string',
				attribute: 'image-alt-text',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: "Alt text for the card's image.\n\nThis is optional prop, but may be required for an\nimage due to accessibility requirements.\n\nYou can find guidance on when to add alt text to an image\non the Ontario.ca web content editing guide.\n\nhttps://www.ontario.ca/page/ontario-ca-web-content-editing-guide#alt-text-image-accessibility\n\nNote: This should default to an empty string ('') to ensure the alt attribute appears in the markup\nfor decorative images. If left as undefined, the alt attribute will not render in markup.",
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "''",
			},
			description: {
				type: 'string',
				attribute: 'description',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Text to be displayed within the card description container.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			cardLink: {
				type: 'string',
				attribute: 'card-link',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Action link for when the card is clicked.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			layoutDirection: {
				type: 'string',
				attribute: 'layout-direction',
				mutable: false,
				complexType: {
					original: 'LayoutDirection',
					resolved: '"horizontal" | "vertical" | undefined',
					references: {
						LayoutDirection: {
							location: 'import',
							path: './ontario-card-types',
							id: 'src/components/ontario-card/ontario-card-types.tsx::LayoutDirection',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: "The layout direction/orientation of the card.\n\nIf no type is passed, it will default to 'vertical'.",
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'vertical'",
			},
			headerColour: {
				type: 'string',
				attribute: 'header-colour',
				mutable: false,
				complexType: {
					original: 'HeaderColour',
					resolved:
						'"teal" | "gold" | "yellow" | "taupe" | "green" | "lime" | "sky" | "blue" | "purple" | "dark-accent" | "light-accent" | "light-gold" | "light-yellow" | "light-taupe" | "light-green" | "light-lime" | "light-teal" | "light-sky" | "light-blue" | "light-purple" | "light-orange" | "light-red" | "light-magenta" | "orange" | "red" | "magenta" | undefined',
					references: {
						HeaderColour: {
							location: 'import',
							path: './ontario-card-types',
							id: 'src/components/ontario-card/ontario-card-types.tsx::HeaderColour',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: "Set the card's header colour.\n\nThis is optional.",
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			horizontalImagePositionType: {
				type: 'string',
				attribute: 'horizontal-image-position-type',
				mutable: false,
				complexType: {
					original: 'HorizontalImagePositionType',
					resolved: '"left" | "right" | undefined',
					references: {
						HorizontalImagePositionType: {
							location: 'import',
							path: './ontario-card-types',
							id: 'src/components/ontario-card/ontario-card-types.tsx::HorizontalImagePositionType',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [
						{
							name: 'example',
							text: '\t<ontario-card\n\tcard-type="horizontal"\n\tlabel="Card Title 1"\n\timage="https://picsum.photos/200/300"\n\thorizontal-image-position-type="left"\n\thorizontal-image-size-type="one-fourth"\n  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"\n>\n</ontario-card>',
						},
					],
					text: "The position of the image when the card-type is set to 'horizontal'.\n\nThis prop is only necessry when the card-type is set to 'horizontal'.",
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'left'",
			},
			horizontalImageSizeType: {
				type: 'string',
				attribute: 'horizontal-image-size-type',
				mutable: false,
				complexType: {
					original: 'HorizontalImageSizeType',
					resolved: '"one-fourth" | "one-third" | undefined',
					references: {
						HorizontalImageSizeType: {
							location: 'import',
							path: './ontario-card-types',
							id: 'src/components/ontario-card/ontario-card-types.tsx::HorizontalImageSizeType',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [
						{
							name: 'example',
							text: '\t<ontario-card\n\tcard-type="horizontal"\n\tlabel="Card Title 1"\n\timage="https://picsum.photos/200/300"\n\thorizontal-image-position-type="left"\n\thorizontal-image-size-type="one-fourth"\n  description="Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Ipsum"\n>\n</ontario-card>',
						},
					],
					text: "The size of the image when the card-type is set to 'horizontal'.\n\nThis prop is only necessry when the card-type is set to 'horizontal'.",
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'one-third'",
			},
			ariaLabelText: {
				type: 'string',
				attribute: 'aria-label-text',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Provides more context as to what the card interaction is doing. This should only be used for accessibility purposes, if the card interaction requires more * * description than what the text provides.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
		};
	}
	static get states() {
		return {
			cardState: {},
		};
	}
	static get elementRef() {
		return 'host';
	}
	static get watchers() {
		return [
			{
				propName: 'layoutDirection',
				methodName: 'validateLayoutDirection',
			},
			{
				propName: 'headingLevel',
				methodName: 'validateHeadingLevel',
			},
			{
				propName: 'headerColour',
				methodName: 'validateHeaderColour',
			},
		];
	}
}
//# sourceMappingURL=ontario-card.js.map
