import { h, Fragment } from '@stencil/core';
import { supportedLanguages } from '../../utils/common/language-types';
import { default as translations } from '../../translations/global.i18n.json';
import { validateValueAgainstArray } from '../../utils/validation/validation-functions';
import { ConsoleMessageClass } from '../../utils/console-message/console-message';
import { printArray, getRootHTMLElement } from '../../utils/helper/utils';
export class OntarioLanguageToggle {
	/**
	 * The language of the component.
	 *
	 * In most cases, the language toggle should be the source of truth for determining the site language.
	 *
	 * Only pass a language value here if necessary.
	 */
	language;
	/**
	 * The size of the language toggle button.
	 *
	 * If no prop is passed, it will be set to the `default` size.
	 */
	size = 'default';
	/**
	 * The URL to change to when the language toggle button is clicked.
	 *
	 * This is optional.
	 */
	url;
	/**
	 * A custom function to pass to the language toggle button.
	 *
	 * This is optional.
	 */
	customLanguageToggle;
	translations = translations;
	/**
	 * Internal state used as the source of truth for component language.
	 */
	languageState;
	/**
	 * Internal state used to render the text on the language toggle UI.
	 */
	oppositeLanguageLabel = undefined;
	/**
	 * Updates the language and languageState props when changes to the language prop are detected.
	 */
	updateLanguage() {
		if (this.language) {
			if (!validateValueAgainstArray(this.language, supportedLanguages)) {
				this.showLanguageWarning(this.language);
				this.language = this.translations.siteLanguage.abbreviation.en;
			}
			this.languageState = this.language;
		}
		this.setAppLanguageHandler();
	}
	/**
	 * Event that fires during the setAppLanguageHandler() method.
	 *
	 * The event contains the current language (after language logic has already occurred).
	 */
	setAppLanguage;
	/**
	 * Event that fires when the language toggle is pressed/clicked.
	 *
	 * The event contains the oldLanguage along with the newLanguage.
	 */
	headerLanguageToggled;
	/**
	 * This function sets the languageState (if not already set).
	 *
	 * It also emits the setAppLanguage() event, updates the component language label, and
	 * updates the <html> tag lang attribute with the languageState value.
	 *
	 * It gets called by the connectedCallback() component lifecycle hook, and by the
	 * updateLanguage() method, which is fired on the watch for the language prop.
	 */
	setAppLanguageHandler() {
		const defaultLang = this.translations.siteLanguage.abbreviation.en;
		const rootLang = getRootHTMLElement()?.lang;
		// If languageState is not set, set it equal to the following cadence:
		// language prop value, <html> tag lang attribute, or default to "en"
		if (!this.languageState) {
			if (this.language) {
				this.languageState = this.language;
			} else if (rootLang) {
				if (validateValueAgainstArray(rootLang, supportedLanguages)) {
					this.languageState = rootLang;
				} else {
					this.showLanguageWarning(rootLang, 'document');
					this.languageState = defaultLang;
				}
			} else {
				this.languageState = defaultLang;
			}
		}
		this.setAppLanguage.emit(this.languageState);
		this.oppositeLanguageLabel = {
			fullWord: this.getOppositeLanguageFullWord(),
			abbreviation: this.getOppositeLanguageAbbrievation(),
		};
		this.updateHTMLLang();
	}
	/**
	 * An event that emits to other components that the language toggle button has been toggled.
	 *
	 * @param {Language} oldLanguage - The language prior to the language toggle being pressed.
	 * @param {globalThis.Event} event - event that triggered the function (e.g. onclick).
	 */
	handleHeaderLanguageToggled(oldLanguage, event) {
		this.languageState =
			oldLanguage === this.translations.siteLanguage.abbreviation.en
				? this.translations.siteLanguage.abbreviation.fr
				: this.translations.siteLanguage.abbreviation.en;
		this.headerLanguageToggled.emit({ oldLanguage: oldLanguage, newLanguage: this.languageState });
		this.updateHTMLLang();
		if (this.customLanguageToggle && event) {
			this.customLanguageToggle(event);
		}
	}
	/**
	 * Prints a warning message to the console about using an incorrect language for the component.
	 *
	 * @param {string} lang - The incorrect language that was received.
	 * @param {string} type - prop/document | Where the incorrect language is coming from.
	 */
	showLanguageWarning(lang, type = 'prop') {
		const propOrDocumentMessage =
			type === 'prop' ? `The language prop value of ${lang} ` : `The HTML document lang attribute value of ${lang} `;
		const message = new ConsoleMessageClass();
		message
			.addDesignSystemTag()
			.addRegularText(propOrDocumentMessage)
			.addRegularText('is not a valid language value for the ')
			.addMonospaceText(' <ontario-language-toggle> ')
			.addRegularText(`component. Valid language values are ${printArray([...supportedLanguages])}. `)
			.addRegularText(`A default language value of ${this.translations.siteLanguage.abbreviation.en} will be applied.`)
			.printMessage();
	}
	/**
	 * Returns abbreviated text for the opposite language.
	 *
	 * @returns {Language}
	 */
	getOppositeLanguageAbbrievation() {
		return this.languageState === this.translations.siteLanguage.abbreviation.en
			? this.translations.siteLanguage.abbreviation.fr
			: this.translations.siteLanguage.abbreviation.en;
	}
	/**
	 * Returns full word text for the opposite language.
	 *
	 * @returns {string}
	 */
	getOppositeLanguageFullWord() {
		return this.languageState === this.translations.siteLanguage.abbreviation.en
			? this.translations.siteLanguage.fullWord.fr
			: this.translations.siteLanguage.fullWord.en;
	}
	/*
	 * Updates the <html> lang attribute based on component languageState.
	 */
	updateHTMLLang = () => {
		const htmlElement = getRootHTMLElement();
		if (htmlElement) {
			htmlElement.setAttribute('lang', this.languageState);
		}
	};
	/**
	 * Component life cycle hook.
	 *
	 * https://stenciljs.com/docs/component-lifecycle#connectedcallback
	 */
	connectedCallback() {
		this.setAppLanguageHandler();
	}
	/**
	 * Component life cycle hook.
	 *
	 * https://stenciljs.com/docs/component-lifecycle#componentdidload
	 */
	componentDidLoad() {
		/**
		 * Creates a MutationObserver (a type of watch) on the <html> tag lang attribute.
		 *
		 * When changes occur, the oppositeLanguageLabel state variable regenerates.
		 *
		 * This is to act as a form of callback and create a subtle delay between page content
		 * updating and the language toggle label updating.
		 */
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				switch (mutation.type) {
					case 'attributes':
						switch (mutation.attributeName) {
							case 'lang':
								this.oppositeLanguageLabel = {
									fullWord: this.getOppositeLanguageFullWord(),
									abbreviation: this.getOppositeLanguageAbbrievation(),
								};
								break;
						}
						break;
				}
			});
		});
		// Only create/trigger the MutationObserver if the <html> element exists.
		if (getRootHTMLElement()) {
			const options = { attributes: true };
			observer.observe(getRootHTMLElement(), options);
		}
	}
	render() {
		return h(
			'a',
			{
				'key': '6c86a21b82c98dfad80eb1095af399847286c6bd',
				'aria-label': this.translations.languageToggle.ariaLabel[`${this.oppositeLanguageLabel?.abbreviation}`],
				'class':
					this.size === 'default'
						? 'ontario-language-toggler ontario-language-toggler--default'
						: 'ontario-language-toggler ontario-language-toggler--small',
				'href': this.url ? this.url : '#',
				'hreflang': this.oppositeLanguageLabel?.abbreviation,
				'lang': this.oppositeLanguageLabel?.abbreviation,
				'onClick': (e) => this.handleHeaderLanguageToggled(this.languageState, e),
			},
			this.size === 'small'
				? h('span', null, this.oppositeLanguageLabel?.fullWord)
				: h(
						Fragment,
						null,
						h(
							'abbr',
							{ title: this.oppositeLanguageLabel?.fullWord, class: 'ontario-show-for-small-only' },
							this.oppositeLanguageLabel?.abbreviation.toUpperCase(),
						),
						h('span', { class: 'ontario-show-for-medium' }, this.oppositeLanguageLabel?.fullWord),
					),
		);
	}
	static get is() {
		return 'ontario-language-toggle';
	}
	static get encapsulation() {
		return 'shadow';
	}
	static get originalStyleUrls() {
		return {
			$: ['ontario-language-toggle.scss'],
		};
	}
	static get styleUrls() {
		return {
			$: ['ontario-language-toggle.css'],
		};
	}
	static get properties() {
		return {
			language: {
				type: 'string',
				attribute: 'language',
				mutable: true,
				complexType: {
					original: 'Language',
					resolved: '"en" | "fr" | undefined',
					references: {
						Language: {
							location: 'import',
							path: '../../utils/common/language-types',
							id: 'src/utils/common/language-types.ts::Language',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The language of the component.\n\nIn most cases, the language toggle should be the source of truth for determining the site language.\n\nOnly pass a language value here if necessary.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			size: {
				type: 'string',
				attribute: 'size',
				mutable: false,
				complexType: {
					original: "'default' | 'small'",
					resolved: '"default" | "small" | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The size of the language toggle button.\n\nIf no prop is passed, it will be set to the `default` size.',
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'default'",
			},
			url: {
				type: 'string',
				attribute: 'url',
				mutable: true,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The URL to change to when the language toggle button is clicked.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			customLanguageToggle: {
				type: 'unknown',
				attribute: 'custom-language-toggle',
				mutable: false,
				complexType: {
					original: '(event: globalThis.Event) => void',
					resolved: '((event: Event) => void) | undefined',
					references: {
						globalThis: {
							location: 'global',
							id: 'global::globalThis',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'A custom function to pass to the language toggle button.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
			},
		};
	}
	static get states() {
		return {
			translations: {},
			languageState: {},
			oppositeLanguageLabel: {},
		};
	}
	static get events() {
		return [
			{
				method: 'setAppLanguage',
				name: 'setAppLanguage',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [],
					text: 'Event that fires during the setAppLanguageHandler() method.\n\nThe event contains the current language (after language logic has already occurred).',
				},
				complexType: {
					original: 'Language',
					resolved: '"en" | "fr"',
					references: {
						Language: {
							location: 'import',
							path: '../../utils/common/language-types',
							id: 'src/utils/common/language-types.ts::Language',
						},
					},
				},
			},
			{
				method: 'headerLanguageToggled',
				name: 'headerLanguageToggled',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [],
					text: 'Event that fires when the language toggle is pressed/clicked.\n\nThe event contains the oldLanguage along with the newLanguage.',
				},
				complexType: {
					original: 'HeaderLanguageToggleEventDetails',
					resolved: 'HeaderLanguageToggleEventDetails',
					references: {
						HeaderLanguageToggleEventDetails: {
							location: 'import',
							path: '../../utils/events/common-events.interface',
							id: 'src/utils/events/common-events.interface.ts::HeaderLanguageToggleEventDetails',
						},
					},
				},
			},
		];
	}
	static get watchers() {
		return [
			{
				propName: 'language',
				methodName: 'updateLanguage',
			},
		];
	}
}
//# sourceMappingURL=ontario-language-toggle.js.map
