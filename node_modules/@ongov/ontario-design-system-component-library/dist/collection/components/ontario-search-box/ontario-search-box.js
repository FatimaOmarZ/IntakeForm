import { h } from '@stencil/core';
import { Input } from '../../utils/common/input/input';
import OntarioIconSearch from '../ontario-icon/assets/ontario-icon-search.svg';
import { handleInputEvent } from '../../utils/events/event-handler';
import { EventType } from '../../utils/events/event-handler.interface';
import { InputCaption } from '../../utils/common/input-caption/input-caption';
import { default as translations } from '../../translations/global.i18n.json';
import { constructHintTextObject } from '../../utils/components/hints/hints';
export class OntarioSearchBox {
	element;
	internals;
	/**
	 * This Ref is used get a direct reference to the hint text element
	 */
	hintTextRef;
	/**
	 * This Ref is used get a direct reference to the search input element
	 */
	inputFieldRef;
	/**
	 * The language of the component.
	 * This is used for translations. If none is passed, it will default to English.
	 */
	language = 'en';
	/**
	 * The unique identifier of the search-box component. This is optional - if no ID is passed, one will be generated.
	 */
	elementId;
	/**
	 * The value of the search term.
	 * This is optional.
	 */
	value;
	/**
	 * The text to display as the input label
	 *
	 * @example
	 * <ontario-search-box
	 *   caption='{
	 *			"captionText": "Search directory",
	 *			"captionType": "default"
	 *		}'
	 *		required = "true"
	 * >
	 * </ontario-search-box>
	 */
	caption;
	/**
	 * This is used to determine whether the dropdown list is required or not.
	 * This prop gets passed to the InputCaption utility to display either an optional or required flag in the label.
	 * If no prop is set, it will default to false (optional).
	 */
	required = false;
	/**
	 * This Function to perform a search operation.
	 * This function will be called when the search submit button is triggered.
	 * The value argument is used for as search term to use for the search operation. This parameter is optional.
	 * The performSearch prop can be set dynamically using JavaScript, allowing you to define custom search functionality when the search form is submitted.
	 *
	 * @example
	 * <ontario-search-box
	 *	  id="ontario-search-box"
	 *	  caption='Search directory'
	 * ></ontario-search-box>
	 *
	 * <script>
	 *	window.addEventListener('load', () => {
	 *		const searchBox = document.getElementById('ontario-search-box');
	 *		searchBox.performSearch = async (value) => {
	 * 			console.log('Performing search with value:', value);
	 *		};
	 *	});
	 * </script>
	 */
	performSearch;
	/**
	 * Used to include the ontario-hint-text component for the search-box.
	 * This is optional.
	 */
	hintText;
	/**
	 * Used to add a custom function to the input onInput event.
	 */
	customOnInput;
	/**
	 * Used to add a custom function to the input onChange event.
	 */
	customOnChange;
	/**
	 * Used to add a custom function to the input onBlur event.
	 */
	customOnBlur;
	/**
	 * Used to add a custom function to the input onFocus event.
	 */
	customOnFocus;
	/**
	 * Emitted when the search is submitted.
	 * Below is an example on how to hook into the event to get the event details.
	 *
	 * @example
	 *	<script>
	 *		document.getElementById('ontario-search-box').addEventListener('searchOnSubmit', (event) => {
	 *	 		const searchValue = event.detail;
	 *			console.log('Search submitted with value:', searchValue);
	 *	  };
	 * 	</script>
	 */
	searchOnSubmit;
	/**
	 * Emitted when a input  occurs when an input has been changed.
	 */
	inputOnInput;
	/**
	 * Emitted when a keyboard input or mouse event occurs when an input has been changed.
	 */
	inputOnChange;
	/**
	 * Emitted when a keyboard input event occurs when an input has lost focus.
	 */
	inputOnBlur;
	/**
	 * Emitted when a keyboard input event occurs when an input has gained focus.
	 */
	inputOnFocus;
	/**
	 * The hint text options are re-assigned to the internalHintText array.
	 */
	internalHintText;
	/**
	 * Instantiate an InputCaption object for internal logic use
	 */
	captionState;
	/**
	 * Used for the `aria-describedby` value of the dropdown list. This will match with the id of the hint text.
	 */
	hintTextId;
	/**
	 * Watch for changes to the `hintText` prop.
	 *
	 * If a `hintText` prop is passed, the `constructHintTextObject` function will convert it to the correct format, and set the result to the `internalHintText` state.
	 */
	parseHintText() {
		if (this.hintText) {
			const hintTextObject = constructHintTextObject(this.hintText);
			this.internalHintText = hintTextObject;
		}
	}
	/**
	 * Watch for changes to the `caption` prop.
	 *
	 * The caption will be run through the InputCaption constructor to convert it to the correct format, and set the result to the `captionState` state.
	 * @param newValue: Caption | string
	 */
	updateCaptionState(newValue) {
		this.captionState = new InputCaption(
			this.element.tagName,
			newValue,
			translations,
			this.language,
			false,
			this.required,
		);
	}
	/**
	 * Watch for changes to the `language` prop to render either the English or French translations
	 */
	updateLanguage() {
		this.updateCaptionState(this.caption);
	}
	/**
	 * If a `hintText` prop is passed, the id generated from it will be set to the internal `hintTextId` state to match with the select `aria-describedBy` attribute.
	 */
	async componentDidLoad() {
		this.hintTextId = await this.hintTextRef?.getHintTextId();
	}
	componentWillLoad() {
		this.elementId = this.elementId;
		this.parseHintText();
		this.updateCaptionState(this.caption);
	}
	/**
	 * Function to handle input events and the information pertaining to the input to emit.
	 */
	handleEvent(event, eventType) {
		const input = event.target;
		// Update the component value to match the value of the input element.
		this.value = input?.value;
		this.internals?.setFormValue?.(this.value ?? '');
		handleInputEvent(
			event,
			eventType,
			input,
			this.inputOnChange,
			this.inputOnFocus,
			this.inputOnBlur,
			this.inputOnInput,
			'input',
			this.customOnChange,
			this.customOnFocus,
			this.customOnBlur,
			this.customOnInput,
			this.element,
		);
	}
	/**
	 * handleSearch function is called when the search submit button is clicked
	 */
	async handleSearch(event) {
		event.preventDefault();
		this.searchOnSubmit.emit(this.value);
		this.performSearch && (await this.performSearch(this.value));
	}
	getId() {
		return this.elementId ?? '';
	}
	getValue() {
		return this.value ?? '';
	}
	/**
	 *This function ensures that the focus returns to the search input field when the reset button is clicked.
	 */
	setFocus(inputRef) {
		if (inputRef) {
			inputRef.focus();
		}
	}
	/**
	 * when the reset button is clicked this function gets called
	 */
	handleFocus = () => {
		this.setFocus(this.inputFieldRef);
	};
	render() {
		const searchInputFieldId = 'ontario-search-input-field';
		return h(
			'form',
			{
				key: 'e3c63d000fc89ce897173eb391ae1f384433039e',
				name: 'searchForm',
				id: 'ontario-search-form-container',
				class:
					'ontario-search__container ontario-columns ontario-small-10 ontario-medium-offset-3 ontario-medium-6 ontario-large-offset-0 ontario-large-6',
				novalidate: true,
			},
			this.captionState.getCaption(searchInputFieldId, false, true) /* Note the _required_ text is disabled */,
			this.internalHintText &&
				h('ontario-hint-text', {
					key: '7db0a418e18506a0d30519127faa32bc6008c4e0',
					hint: this.internalHintText.hint,
					hintContentType: this.internalHintText.hintContentType,
					ref: (el) => (this.hintTextRef = el),
				}),
			h(
				'div',
				{ key: '47611717f5f3ede04d4506230c5bd9ba06072edd', class: 'ontario-search__input-container' },
				h(Input, {
					'key': '0a86eb7189908a9e3822ded6fcba0fac20596f11',
					'aria-describedBy': this.hintTextId,
					'type': 'search',
					'name': 'search',
					'id': searchInputFieldId,
					'autoComplete': 'off',
					'aria-autocomplete': 'none',
					'className': 'ontario-search__input ontario-input',
					'required': true,
					'ref': (el) => (this.inputFieldRef = el),
					'onInput': (e) => this.handleEvent(e, EventType.Input),
					'onChange': (e) => this.handleEvent(e, EventType.Change),
					'onBlur': (e) => this.handleEvent(e, EventType.Blur),
					'onFocus': (e) => this.handleEvent(e, EventType.Focus),
					'value': this.getValue(),
				}),
				h(Input, {
					key: '1523d69dcd1f37861eb5911dbc0a52779502a795',
					className: 'ontario-search__reset',
					id: 'ontario-search-reset',
					type: 'reset',
					value: '',
					onClick: () => this.handleFocus(),
				}),
				h(
					'button',
					{
						key: '3a7ad4366efaef64fd32f77a2ef1b871af15cb48',
						class: 'ontario-search__submit',
						type: 'submit',
						id: 'ontario-search-box__submit',
						onClick: (e) => this.handleSearch(e),
					},
					h('span', { key: '9e8068e22e63dae3f6cafbfcaaccbbc466976121', innerHTML: OntarioIconSearch }),
				),
			),
		);
	}
	static get is() {
		return 'ontario-search-box';
	}
	static get encapsulation() {
		return 'shadow';
	}
	static get originalStyleUrls() {
		return {
			$: ['ontario-search-box.scss'],
		};
	}
	static get styleUrls() {
		return {
			$: ['ontario-search-box.css'],
		};
	}
	static get properties() {
		return {
			language: {
				type: 'string',
				attribute: 'language',
				mutable: true,
				complexType: {
					original: 'Language',
					resolved: '"en" | "fr" | undefined',
					references: {
						Language: {
							location: 'import',
							path: '../../utils/common/language-types',
							id: 'src/utils/common/language-types.ts::Language',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The language of the component.\nThis is used for translations. If none is passed, it will default to English.',
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'en'",
			},
			elementId: {
				type: 'string',
				attribute: 'element-id',
				mutable: true,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The unique identifier of the search-box component. This is optional - if no ID is passed, one will be generated.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			value: {
				type: 'string',
				attribute: 'value',
				mutable: true,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The value of the search term.\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			caption: {
				type: 'string',
				attribute: 'caption',
				mutable: false,
				complexType: {
					original: 'Caption | string',
					resolved: 'Caption | string',
					references: {
						Caption: {
							location: 'import',
							path: '../../utils/common/input-caption/caption.interface',
							id: 'src/utils/common/input-caption/caption.interface.ts::Caption',
						},
					},
				},
				required: false,
				optional: false,
				docs: {
					tags: [
						{
							name: 'example',
							text: '<ontario-search-box\n\u00A0 caption=\'{\n\t\t"captionText": "Search directory",\n\t\t"captionType": "default"\n\t}\'\n\trequired = "true"\n>\n</ontario-search-box>',
						},
					],
					text: 'The text to display as the input label',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			required: {
				type: 'boolean',
				attribute: 'required',
				mutable: false,
				complexType: {
					original: 'boolean',
					resolved: 'boolean | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'This is used to determine whether the dropdown list is required or not.\nThis prop gets passed to the InputCaption utility to display either an optional or required flag in the label.\nIf no prop is set, it will default to false (optional).',
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: 'false',
			},
			performSearch: {
				type: 'unknown',
				attribute: 'perform-search',
				mutable: false,
				complexType: {
					original: '(value?: string) => Promise<void>',
					resolved: '((value?: string | undefined) => Promise<void>) | undefined',
					references: {
						Promise: {
							location: 'global',
							id: 'global::Promise',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [
						{
							name: 'example',
							text: "<ontario-search-box\n  id=\"ontario-search-box\"\n  caption='Search directory'\n></ontario-search-box>\n\n<script>\nwindow.addEventListener('load', () => {\n\tconst searchBox = document.getElementById('ontario-search-box');\n\tsearchBox.performSearch = async (value) => {\n\t\t\tconsole.log('Performing search with value:', value);\n\t};\n});\n</script>",
						},
					],
					text: 'This Function to perform a search operation.\nThis function will be called when the search submit button is triggered.\nThe value argument is used for as search term to use for the search operation. This parameter is optional.\nThe performSearch prop can be set dynamically using JavaScript, allowing you to define custom search functionality when the search form is submitted.',
				},
				getter: false,
				setter: false,
			},
			hintText: {
				type: 'string',
				attribute: 'hint-text',
				mutable: false,
				complexType: {
					original: 'string | Hint',
					resolved: 'Hint | string | undefined',
					references: {
						Hint: {
							location: 'import',
							path: '../../utils/common/common.interface',
							id: 'src/utils/common/common.interface.ts::Hint',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Used to include the ontario-hint-text component for the search-box.\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			customOnInput: {
				type: 'unknown',
				attribute: 'custom-on-input',
				mutable: false,
				complexType: {
					original: '(event: globalThis.Event) => void',
					resolved: '((event: Event) => void) | undefined',
					references: {
						globalThis: {
							location: 'global',
							id: 'global::globalThis',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Used to add a custom function to the input onInput event.',
				},
				getter: false,
				setter: false,
			},
			customOnChange: {
				type: 'unknown',
				attribute: 'custom-on-change',
				mutable: false,
				complexType: {
					original: '(event: globalThis.Event) => void',
					resolved: '((event: Event) => void) | undefined',
					references: {
						globalThis: {
							location: 'global',
							id: 'global::globalThis',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Used to add a custom function to the input onChange event.',
				},
				getter: false,
				setter: false,
			},
			customOnBlur: {
				type: 'unknown',
				attribute: 'custom-on-blur',
				mutable: false,
				complexType: {
					original: '(event: globalThis.Event) => void',
					resolved: '((event: Event) => void) | undefined',
					references: {
						globalThis: {
							location: 'global',
							id: 'global::globalThis',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Used to add a custom function to the input onBlur event.',
				},
				getter: false,
				setter: false,
			},
			customOnFocus: {
				type: 'unknown',
				attribute: 'custom-on-focus',
				mutable: false,
				complexType: {
					original: '(event: globalThis.Event) => void',
					resolved: '((event: Event) => void) | undefined',
					references: {
						globalThis: {
							location: 'global',
							id: 'global::globalThis',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Used to add a custom function to the input onFocus event.',
				},
				getter: false,
				setter: false,
			},
		};
	}
	static get states() {
		return {
			internalHintText: {},
			captionState: {},
			hintTextId: {},
		};
	}
	static get events() {
		return [
			{
				method: 'searchOnSubmit',
				name: 'searchOnSubmit',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [
						{
							name: 'example',
							text: "<script>\n\tdocument.getElementById('ontario-search-box').addEventListener('searchOnSubmit', (event) => {\n \t\tconst searchValue = event.detail;\n\t\tconsole.log('Search submitted with value:', searchValue);\n  };\n\t</script>",
						},
					],
					text: 'Emitted when the search is submitted.\nBelow is an example on how to hook into the event to get the event details.',
				},
				complexType: {
					original: 'string',
					resolved: 'string',
					references: {},
				},
			},
			{
				method: 'inputOnInput',
				name: 'inputOnInput',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [],
					text: 'Emitted when a input \u00A0occurs when an input has been changed.',
				},
				complexType: {
					original: 'InputInputEvent',
					resolved: 'InputInteractionEvent & { inputType?: string | undefined; }',
					references: {
						InputInputEvent: {
							location: 'import',
							path: '../../utils/events/event-handler.interface',
							id: 'src/utils/events/event-handler.interface.ts::InputInputEvent',
						},
					},
				},
			},
			{
				method: 'inputOnChange',
				name: 'inputOnChange',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [],
					text: 'Emitted when a keyboard input or mouse event occurs when an input has been changed.',
				},
				complexType: {
					original: 'InputInteractionEvent',
					resolved: '{ id?: string | undefined; value?: string | undefined; }',
					references: {
						InputInteractionEvent: {
							location: 'import',
							path: '../../utils/events/event-handler.interface',
							id: 'src/utils/events/event-handler.interface.ts::InputInteractionEvent',
						},
					},
				},
			},
			{
				method: 'inputOnBlur',
				name: 'inputOnBlur',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [],
					text: 'Emitted when a keyboard input event occurs when an input has lost focus.',
				},
				complexType: {
					original: 'InputFocusBlurEvent',
					resolved: 'InputInteractionEvent & { focused: boolean; }',
					references: {
						InputFocusBlurEvent: {
							location: 'import',
							path: '../../utils/events/event-handler.interface',
							id: 'src/utils/events/event-handler.interface.ts::InputFocusBlurEvent',
						},
					},
				},
			},
			{
				method: 'inputOnFocus',
				name: 'inputOnFocus',
				bubbles: true,
				cancelable: true,
				composed: true,
				docs: {
					tags: [],
					text: 'Emitted when a keyboard input event occurs when an input has gained focus.',
				},
				complexType: {
					original: 'InputFocusBlurEvent',
					resolved: 'InputInteractionEvent & { focused: boolean; }',
					references: {
						InputFocusBlurEvent: {
							location: 'import',
							path: '../../utils/events/event-handler.interface',
							id: 'src/utils/events/event-handler.interface.ts::InputFocusBlurEvent',
						},
					},
				},
			},
		];
	}
	static get elementRef() {
		return 'element';
	}
	static get watchers() {
		return [
			{
				propName: 'hintText',
				methodName: 'parseHintText',
			},
			{
				propName: 'caption',
				methodName: 'updateCaptionState',
			},
			{
				propName: 'language',
				methodName: 'updateLanguage',
			},
		];
	}
	static get attachInternalsMemberName() {
		return 'internals';
	}
}
//# sourceMappingURL=ontario-search-box.js.map
