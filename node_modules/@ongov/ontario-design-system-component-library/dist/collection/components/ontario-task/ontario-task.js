import { h, Fragment } from '@stencil/core';
import { ConsoleMessageClass } from '../../utils/console-message/console-message';
import { TaskStatuses, TaskToBadgeColour } from '../../utils/common/task-statuses.enum';
import { validateLanguage, validateValueAgainstArray } from '../../utils/validation/validation-functions';
import { constructHintTextObject } from '../../utils/components/hints/hints';
import translations from '../../translations/global.i18n.json';
export class OntarioTask {
	el;
	// Reference to the ontario-hint-text element for this task.
	hintTextRef;
	/**
	 * Specifies the label of the task.
	 *
	 * This is required to provide the name of the task.
	 */
	label;
	/**
	 * A unique id for the task.
	 *
	 * This is required.
	 */
	taskId;
	/**
	 * Specifies an optional link associated with the task.
	 *
	 * If provided, clicking the task will navigate to this URL.
	 */
	link;
	/**
	 * Disables the task link when set to `true`.
	 *
	 * Default is `false`, meaning the link will be active if provided.
	 */
	deactivateLink = false;
	/**
	 * The language of the component.
	 *
	 * This is used for translations, and is by default set through event listeners checking for a language property from the header. If no language is passed, it will default to English.
	 */
	language;
	/**
	 * Used to include the ontario-hint-text component for the task.
	 *
	 * This is optional.
	 */
	hintText;
	/**
	 * Defines the status of the task, with default set to 'NotStarted'.
	 *
	 * Accepts values from `TaskStatuses` enum: `NotStarted`, `InProgress`, `Completed`.
	 */
	/**
	 * Defines the status of the task, with default set to 'NotStarted'.
	 *
	 * Accepts values from `TaskStatuses` enum: `NotStarted`, `InProgress`, `Completed`, etc.
	 */
	taskStatus = TaskStatuses.NotStarted;
	/**
	 * Allows consumers to define the heading level for the task label.
	 *
	 * Accepts 'h2', 'h3' or 'h4'. Default is 'h3'.
	 */
	headingLevel = 'h3';
	/**
	 * The hint text options are re-assigned to the internalHintText state.
	 */
	internalHintText;
	/**
	 * Mutable variable, for internal use only.
	 *
	 * Set the task's status state depending on validation result.
	 */
	taskStatusState = TaskStatuses.NotStarted;
	/**
	 * Watch for changes in `taskStatus` prop to validate its value.
	 */
	validateTaskStatus() {
		const validStatuses = Object.values(TaskStatuses);
		const isValidStatus = validStatuses.includes(this.taskStatus);
		this.taskStatusState = isValidStatus ? this.taskStatus : this.warnAndGetDefaultTaskStatus();
		// Update the `data-task-status` attribute
		this.el.setAttribute('data-task-status', this.taskStatusState);
	}
	/**
	 * Logs a warning to the console if the `taskStatus` prop is set to an invalid value.
	 *
	 * This function informs developers that the provided `taskStatus` is not recognized
	 * and resets the status to the default value of `'notStarted'`. The warning message
	 * specifies the valid task statuses to help guide correct usage.
	 *
	 * @returns The default task status `'notStarted'`.
	 */
	warnAndGetDefaultTaskStatus() {
		const validStatuses = Object.values(TaskStatuses).join(', ');
		const message = new ConsoleMessageClass();
		message
			.addDesignSystemTag()
			.addMonospaceText(' taskStatus ')
			.addRegularText('on')
			.addMonospaceText(' <ontario-task> ')
			.addRegularText('was set to an invalid taskStatus; only ')
			.addMonospaceText(validStatuses)
			.addRegularText(' are supported. The default taskStatus ')
			.addMonospaceText(TaskStatuses.NotStarted)
			.addRegularText(' is assumed.')
			.printMessage();
		return TaskStatuses.NotStarted;
	}
	/**
	 * Watch for changes in `headingLevel` prop to validate its value.
	 */
	validateHeadingLevel(newValue) {
		const allowedValues = ['h2', 'h3', 'h4'];
		// Validate the new value against the allowed values
		const isValid = validateValueAgainstArray(newValue, allowedValues);
		if (!isValid) {
			const message = new ConsoleMessageClass();
			message
				.addDesignSystemTag()
				.addMonospaceText(' headingLevel ')
				.addRegularText('on')
				.addMonospaceText(' <ontario-task> ')
				.addRegularText('was set to an invalid value; only ')
				.addMonospaceText(allowedValues.join(', '))
				.addRegularText(' are supported. The default value ')
				.addMonospaceText('h3')
				.addRegularText(' is assumed.')
				.printMessage();
			this.headingLevel = 'h3';
		}
	}
	/**
	 * Watch for changes in `hintText` prop and parse it if available.
	 *
	 * If a `hintText` prop is passed, the `constructHintTextObject` function will convert it to the correct format,
	 * and the result will be stored in the `internalHintText` state.
	 */
	parseHintText() {
		if (this.hintText) {
			const hintTextObject = constructHintTextObject(this.hintText);
			this.internalHintText = hintTextObject;
		}
	}
	/**
	 * Listen for app language settings on the window to update the component language.
	 */
	handleSetAppLanguage(event) {
		if (!this.language) {
			this.language = validateLanguage(event);
		}
	}
	/**
	 * This listens for the `headerLanguageToggled` event sent from the language toggle when it is connected to the DOM.
	 * It is used for changing the component language after the language toggle has been activated.
	 */
	handleHeaderLanguageToggled(event) {
		this.language = validateLanguage(event);
	}
	/**
	 * Determines the badge colour based on the current `taskStatusState`.
	 *
	 * @returns {TaskBadgeColour}
	 */
	getBadgeColour() {
		return TaskToBadgeColour[this.taskStatusState] || 'grey';
	}
	/**
	 * Provides a translated task status string based on the current language.
	 */
	getTranslatedTaskStatus() {
		const resolvedLanguage = validateLanguage(this.language);
		return translations.taskStatus[this.taskStatusState][resolvedLanguage];
	}
	/**
	 * Renders hint text if available.
	 */
	renderHintText() {
		if (this.internalHintText) {
			return h('ontario-hint-text', {
				hint: this.internalHintText.hint,
				hintContentType: this.internalHintText.hintContentType,
				ref: (el) => (this.hintTextRef = el),
			});
		}
		return null;
	}
	/**
	 * Returns the class name(s) for the task label.
	 */
	getClass() {
		return ['ontario-task__label', this.hintText && 'ontario-task__hint-text--true'].filter(Boolean).join(' ');
	}
	/**
	 * Renders the task label and status content.
	 *
	 * This includes dynamically rendering the heading element (h2, h3, or h4) based on the `headingLevel` prop,
	 * as well as the badge indicating the task status.
	 */
	renderTaskContent() {
		const headingProps = {
			id: `task-label--${this.taskId}`,
			class: this.getClass(),
		};
		return h(
			'div',
			{ class: 'ontario-task__content' },
			h(this.headingLevel, headingProps, this.label),
			this.taskStatusState &&
				h(
					'ontario-badge',
					{
						'class': 'ontario-task__badge',
						'role': 'status',
						'aria-label': `${translations.taskStatus.taskStatus[validateLanguage(this.language)]} ${this.getTranslatedTaskStatus()} (${this.taskStatusState})`,
						'colour': this.getBadgeColour(),
					},
					this.getTranslatedTaskStatus(),
				),
		);
	}
	/**
	 * After the component loads, retrieve the hint text ID (if available) from the hintText component,
	 * and set it for the `aria-describedby` attribute.
	 */
	async componentDidLoad() {
		if (this.hintTextRef) {
			let hintTextId = this.hintTextRef.elementId;
			if (!hintTextId) {
				hintTextId = `hint-text--${this.taskId}`;
				this.hintTextRef.elementId = hintTextId;
			}
			const taskElement = this.el.shadowRoot?.querySelector('li');
			if (taskElement) {
				taskElement.setAttribute('aria-describedby', hintTextId);
			}
		}
	}
	/**
	 * Lifecycle method: before the component loads, parse the hint text and
	 * validate language and task status and heading level.
	 */
	async componentWillLoad() {
		this.parseHintText();
		this.language = validateLanguage(this.language);
		this.validateTaskStatus();
		this.validateHeadingLevel(this.headingLevel);
	}
	render() {
		const isLinkActive = this.link && !this.deactivateLink;
		const taskStatusClass = `ontario-task-status--${this.taskStatusState.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()}`;
		const taskContent = h(
			Fragment,
			{ key: '4968807e30ded9336a79d517b25cd0bd35a14a3d' },
			this.renderTaskContent(),
			this.renderHintText(),
		);
		return h(
			'li',
			{
				'key': 'a000b87343f37fbdcee5e96cada8c0344e1a7218',
				'class': `ontario-task ${taskStatusClass}`,
				'role': 'group',
				'aria-labelledby': `task-label--${this.taskId}`,
				'data-task-status': this.taskStatusState,
			},
			isLinkActive
				? h('a', { 'href': this.link, 'class': 'ontario-task__link', 'aria-label': this.label }, taskContent)
				: h('div', null, taskContent),
		);
	}
	static get is() {
		return 'ontario-task';
	}
	static get encapsulation() {
		return 'shadow';
	}
	static get originalStyleUrls() {
		return {
			$: ['ontario-task.scss'],
		};
	}
	static get styleUrls() {
		return {
			$: ['ontario-task.css'],
		};
	}
	static get properties() {
		return {
			label: {
				type: 'string',
				attribute: 'label',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string',
					references: {},
				},
				required: false,
				optional: false,
				docs: {
					tags: [],
					text: 'Specifies the label of the task.\n\nThis is required to provide the name of the task.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			taskId: {
				type: 'string',
				attribute: 'task-id',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string',
					references: {},
				},
				required: false,
				optional: false,
				docs: {
					tags: [],
					text: 'A unique id for the task.\n\nThis is required.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			link: {
				type: 'string',
				attribute: 'link',
				mutable: false,
				complexType: {
					original: 'string',
					resolved: 'string | undefined',
					references: {},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Specifies an optional link associated with the task.\n\nIf provided, clicking the task will navigate to this URL.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			deactivateLink: {
				type: 'boolean',
				attribute: 'deactivate-link',
				mutable: false,
				complexType: {
					original: 'boolean',
					resolved: 'boolean',
					references: {},
				},
				required: false,
				optional: false,
				docs: {
					tags: [],
					text: 'Disables the task link when set to `true`.\n\nDefault is `false`, meaning the link will be active if provided.',
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: 'false',
			},
			language: {
				type: 'string',
				attribute: 'language',
				mutable: true,
				complexType: {
					original: 'Language',
					resolved: '"en" | "fr" | undefined',
					references: {
						Language: {
							location: 'import',
							path: '../../utils/common/language-types',
							id: 'src/utils/common/language-types.ts::Language',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'The language of the component.\n\nThis is used for translations, and is by default set through event listeners checking for a language property from the header. If no language is passed, it will default to English.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			hintText: {
				type: 'string',
				attribute: 'hint-text',
				mutable: true,
				complexType: {
					original: 'string | Hint',
					resolved: 'Hint | string | undefined',
					references: {
						Hint: {
							location: 'import',
							path: '../../utils/common/common.interface',
							id: 'src/utils/common/common.interface.ts::Hint',
						},
					},
				},
				required: false,
				optional: true,
				docs: {
					tags: [],
					text: 'Used to include the ontario-hint-text component for the task.\n\nThis is optional.',
				},
				getter: false,
				setter: false,
				reflect: false,
			},
			taskStatus: {
				type: 'string',
				attribute: 'task-status',
				mutable: false,
				complexType: {
					original: 'TaskStatuses',
					resolved:
						'TaskStatuses.CannotStartYet | TaskStatuses.Completed | TaskStatuses.Error | TaskStatuses.InProgress | TaskStatuses.NotStarted | TaskStatuses.Optional',
					references: {
						TaskStatuses: {
							location: 'import',
							path: '../../utils/common/task-statuses.enum',
							id: 'src/utils/common/task-statuses.enum.ts::TaskStatuses',
						},
					},
				},
				required: false,
				optional: false,
				docs: {
					tags: [],
					text: "Defines the status of the task, with default set to 'NotStarted'.\n\nAccepts values from `TaskStatuses` enum: `NotStarted`, `InProgress`, `Completed`, etc.",
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: 'TaskStatuses.NotStarted',
			},
			headingLevel: {
				type: 'string',
				attribute: 'heading-level',
				mutable: false,
				complexType: {
					original: 'TaskHeadingLevel',
					resolved: '"h2" | "h3" | "h4"',
					references: {
						TaskHeadingLevel: {
							location: 'local',
							path: '/home/runner/work/ontario-design-system/ontario-design-system/packages/ontario-design-system-component-library/src/components/ontario-task/ontario-task.tsx',
							id: 'src/components/ontario-task/ontario-task.tsx::TaskHeadingLevel',
						},
					},
				},
				required: false,
				optional: false,
				docs: {
					tags: [],
					text: "Allows consumers to define the heading level for the task label.\n\nAccepts 'h2', 'h3' or 'h4'. Default is 'h3'.",
				},
				getter: false,
				setter: false,
				reflect: false,
				defaultValue: "'h3'",
			},
		};
	}
	static get states() {
		return {
			internalHintText: {},
			taskStatusState: {},
		};
	}
	static get elementRef() {
		return 'el';
	}
	static get watchers() {
		return [
			{
				propName: 'taskStatus',
				methodName: 'validateTaskStatus',
			},
			{
				propName: 'headingLevel',
				methodName: 'validateHeadingLevel',
			},
			{
				propName: 'hintText',
				methodName: 'parseHintText',
			},
		];
	}
	static get listeners() {
		return [
			{
				name: 'setAppLanguage',
				method: 'handleSetAppLanguage',
				target: 'window',
				capture: false,
				passive: false,
			},
			{
				name: 'headerLanguageToggled',
				method: 'handleHeaderLanguageToggled',
				target: 'window',
				capture: false,
				passive: false,
			},
		];
	}
}
//# sourceMappingURL=ontario-task.js.map
