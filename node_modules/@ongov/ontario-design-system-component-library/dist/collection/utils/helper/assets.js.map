{"version":3,"file":"assets.js","sourceRoot":"","sources":["../../../src/utils/helper/assets.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7C;;;;;;;;;;GAUG;AACH,MAAM,UAAU,oBAAoB,CAAC,SAAiB,EAAE,aAAsB;IAC7E,IAAI,aAAa,EAAE,CAAC;QACnB,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC;IAC3D,CAAC;IAED,IAAI,CAAC;QACJ,OAAO,YAAY,CAAC,YAAY,SAAS,EAAE,CAAC,CAAC;IAC9C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,IAAI,CAAC,2BAA2B,SAAS,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACvF,OAAO,WAAW,SAAS,EAAE,CAAC;IAC/B,CAAC;AACF,CAAC","sourcesContent":["import { getAssetPath } from '@stencil/core';\n\n/**\n * Generate the full path to an image asset based on the base asset path.\n *\n * - If `assetBasePath` is provided, it is used as the base path.\n * - If not, attempts to use Stencil's `getAssetPath` (for Stencil/Angular builds).\n * - If that fails (e.g., in React), falls back to `/assets/`, assuming assets are in the public folder.\n *\n * @param imageName - The name of the image file.\n * @param assetBasePath - Optional base path for assets.\n * @returns The full image path as a string.\n */\nexport function getImageAssetSrcPath(imageName: string, assetBasePath?: string): string {\n\tif (assetBasePath) {\n\t\treturn `${assetBasePath.replace(/\\/$/, '')}/${imageName}`;\n\t}\n\n\ttry {\n\t\treturn getAssetPath(`./assets/${imageName}`);\n\t} catch (error) {\n\t\tconsole.warn(`getAssetPath failed for ${imageName}, falling back to /assets/:`, error);\n\t\treturn `/assets/${imageName}`;\n\t}\n}\n"]}